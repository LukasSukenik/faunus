/*!
@page video Video Tutorial

@htmlonly
<iframe src="https://docs.google.com/file/d/0BzpLUBrTxmurRzN0RnFZc2lhZFE/preview" width="640" height="385"></iframe>
@endhtmlonly

*/

/*!
@page jsonyaml Working with JSON and YAML files

Faunus uses JSON files for input and, in many cases, also for output.
JSON is a subset of the more general format YAML and the latter can be
made more human readable.
To convert between the two formats we
provide a script, `scripts/yason.py`, that can pass
YAML input files,

    $ ./myprogram < yason.py < input.yml

where we assume that `myprogram` reads JSON from standard input,

    Tmjson in;
    std::cin >> in;

The script can also be used oppositely to pretty print JSON as YAML,

    $ yason.py move_out.json

Example YAML file:

~~~~~~~~~~~~~{.yaml}
atomlist:
    A: {eps: 0.15, sigma: 4, dp: 40}
    B: {eps: 0.2, sigma: 10, dp: 10}
moleculelist:
    salt: {atoms: 'A B', atomic: true, Ninit: 50}
moves:
    atomtranslate:
        {salt: {peratom: true}}
energy:
    nonbonded: {}
system:
    temperature: 298.15
    geometry: {length: 50}
~~~~~~~~~~~~~

And the corresponding JSON file,

~~~~~~~~~~~~~{.js}
{
    "atomlist" : {
        "A" : { "eps": 0.15, "sigma":4.0, "dp":40 },
        "B" : { "eps": 0.20, "sigma":10.0, "dp":10 }
    },
    "moleculelist" : { 
        "salt" : { "atoms":"A B", "atomic":true, "Ninit":50 }
    },
    "moves" : {
        "atomtranslate" : {
            "salt" : { "peratom":true }
        }
    },
    "energy" : {
        "nonbonded" : {}
    },
    "system" : {
        "temperature" : 298.15,
        "geometry" : { "length":50 }
    }
}
~~~~~~~~~~~~~
*/


/*!
@page development Development
@tableofcontents

# Make a new Faunus program

We'll here show three ways to link a new, external program to the Faunus library.

## Using CMake

Start by making a new directory (anywhere you want), put your source file there,
and make a `CMakeLists.txt` file telling CMake about the new executable.
For example:

    $ cd $HOME/newproject
    $ cat hello.cpp

    #include <faunus/faunus.h>
    int main() {
      Faunus::Point a(0,0,0);
    }

    $ echo 'fau_example(hello "./" hello.cpp)' > CMakeLists.txt

Return to the main faunus directory and rerun `cmake` with the following command:

    $ cd $HOME/faunus
    $ cmake . -DMYPLAYGROUND=$HOME/newproject  # absolute path!

That's it! A `Makefile` for your new target, `hello`, has been generated and you can compile
directly from the `newproject` directory:

    $ cd $HOME/newproject
    $ make

Note that all options selected when configuring faunus will be applied to `hello` as well,
and any changes to the faunus code base will trigger re-compilation upon running `make`.


## Using CMake and automatic faunus download

Here we unleash CMake magic to automatically *download and build faunus*, as well as link it
to your program. Only two files are required:

-# Your source file, for example `hello.cpp` as above.
-# This `CMakeLists.txt` file:

       if (PROJECT_NAME MATCHES "Faunus")
         fau_example(hello "./" hello.cpp)
       else()
         cmake_minimum_required(VERSION 2.8)
         include(ExternalProject)
         ExternalProject_Add(faunus
           GIT_REPOSITORY https://github.com/mlund/faunus
           CMAKE_ARGS -DCMAKE_BUILD_TYPE=RelWithDebInfo -DMYPLAYGROUND=${CMAKE_SOURCE_DIR}
           INSTALL_COMMAND "")
       endif() 

Place both in a fresh directory and do:

    $ cmake .
    $ make
    $ make hello


# Quick Class Overview

A good place to start is to understand the following classes. Also, for a more grouped
overview do have a look at the Namespace list.

Class                                | Description
:----------------------------------- | :----------------------------------------------
`Faunus::Move::Propagator`           | Controls Monte Carlo moves
`Faunus::Analysis::CombinedAnalysis` | Controls analysis to be run during simulation
`Faunus::AtomData`                   | Defines atom properties
`Faunus::MoleculeData`               | Defines molecule properties
`Faunus::Space`                      | Contains all particles, molecules, and geometry
`Faunus::Group`                      | A range of particles


# Coding Guidelines

## Naming Style

Object                          | Example                     | Comment
:------------------------------ | :-------------------------- | :----------
Types and namespaces            | `class AtomicTranslation;`  | Mixed case starting with upper case
Member functions, functions     | `double getTemperature();`  | Mixed case starting with lower case
Public variables (*avoid!*)     | `int numberOfParticles;`    | Mixed case starting with lower case
Private variables               | `int _i;`                   | Underscore prefix 

## Editing code

- Document code using Doxygen tags - the
  [Markdown](http://www.stack.nl/~dimitri/doxygen/markdown.html) syntax is recommended.
- Set your editor to use a *white space* indentation of *two*.
  - VIM: add the following to `.vimrc`:
  ~~~
  set expandtab
  set shiftwidth=4
  set softtabstop=4
  ~~~

## Design

Some books on C++ design,

- [C++ Coding Standards](http://en.wikipedia.org/wiki/Special:BookSources/0321113586)
  by Sutter and Alexandrescu as well as
- [Effective C++](http://en.wikipedia.org/wiki/Special:BookSources/0321334876)
  by Meyers.

A few basic tips,

- Generously use C++'s [assert()](http://www.cplusplus.com/reference/clibrary/cassert/assert)
  command to ease debugging
- Recycle code with polymorphic designs
- Use compile-time polymophism (templates) for speed limiting steps
- Use STL and Eigen where possible
- Hide data and functions as much as possible (i.e. make them private)
- Stride for [const-correctness](http://en.wikipedia.org/wiki/Const-correctness)
- Treat compiler warnings as errors

## Committing code

To contribute to the Faunus project, first make a *fork* of the
repository and request changes to be added via a *pull request*.
Further instructions can be found on GitHub:

- [Forking a repository](http://help.github.com/articles/fork-a-repo)
- [Pull requests](http://help.github.com/articles/using-pull-requests)

Before submitting changes, please make sure nothing is broken:

    $ make all
    $ make manual
    $ make test
*/

/*!
@page examples Examples
- @subpage example_minimal 
- @subpage example_keesom
- @subpage example_bulk 
- @subpage example_grand 
- @subpage example_twobody
- @subpage example_GCMolecular
- @subpage example_water2
- @subpage example_polymers
- @subpage example_temper   
- @subpage example_penalty
- @subpage example_slitpolymer
- @subpage example_membrane
- @subpage example_cigars2fibrils
- @subpage example_stripes
*/

@page license License
@verbinclude LICENSE
*/
