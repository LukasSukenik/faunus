/*!
@mainpage Welcome to Faunus!

____
![](faunus-textart.png)
____

Table of contents
=================

- [Quick Overview / Readme](md_README.html)
- @ref license
- Getting Started
  - @ref downloadbuild
  - @ref linkingyourown
  - @ref importantclasses
- Tutorials
  - @ref example_minimal - A minimal example of how to set up a MC simulation (C++/Python)
  - @ref example_bulk - A melted NaCl crystal using a shifted Coulomb potential (NVT/NPT)
  - @ref example_polymers - Flexible, linear polymers in an electrolyte solution (NPT)
  - @ref example_temper - Parallel tempering example using MPI
- Development
  - @ref guidelines

@page downloadbuild Getting and building Faunus

System Requirements
===================

Faunus will compile in any unix-like environment including Linux, MacOS,
and most probably also under Cygwin on Windows. The following are the
minimum requirements:

- [CMake 2.8+](http://www.cmake.org)
- C++11 compliant compiler (gcc4.7+, clang3+, Intel13, ...)

For more advanced features you may also need:

- MPI (mpich, openmpi)
- Openbabel
- Python
- Swig
- Doxygen

Most major compilers support the C++11 features used in Faunus and for debugging and
development we recommend the clang compiler whereas for speedy production runs,
gcc and intel are probably preferable. Below is a list of compilers, known to
work:

Compiler       | Version        | Comment
:------------- | :-----------   | :----------
GCC            | (4.6), 4.7     | Good optimization
Clang          | 3.1            | Good warning/error info, slower code
Intel Composer | 13             | Pedantic warnings, good optimization


Getting the source code
=======================

Faunus is currently released only through the Sourceforge repository - i.e. no specific versions
are released. To download the latest revision simply use subversion with the command:

    svn checkout svn://svn.code.sf.net/p/faunus/code/trunk faunus-code

This will download faunus into the directory `faunus-code`.
For a particular revision or datestamp you, do something like this:

    svn checkout -r 666 svn://svn.code.sf.net/p/faunus/code/trunk faunus-r666

Compiling
=========

Using the default compiler
--------------------------

If you think your system compiler is up to date, simply do:

    $ cd faunus-code/
    $ cmake . [options]
    $ make

All available build options are listed in the [README](@ref compiling)
file so let's just give a single example:

    $ cmake . -DENABLE_MPI=on -DCMAKE_BUILD_TYPE=Release

If you have installed `ccmake` you can also control the build setting from a text based
interface by instead doing

    $ ccmake .

Using a custom compiler
-----------------------

If your compiler is in a non-standard location or if you have multiple
compilers installed, use the `CXX` and `CC` shell variables to guide cmake to
your desired compiler. For example:

    $ rm -f CMakeCache.txt (if any)
    $ CXX=/opt/local/bin/g++ CC=/opt/local/bin/gcc cmake .
    $ make

Out of source build
-------------------

The above method will build Faunus directly in the `faunus-code` directory. If you wish to leave
the source directory untouched you can instead use an out-of-source build. This can be useful if you
want to make multiple builds with different settings or compilers.
To make an out-of-source build do:

    $ mkdir build
    $ cd build
    $ cmake ../faunus-code [options]
    $ make

Running the test suite
======================

Finally, after having build faunus as described above you should now run the test suite to check
if everything works as expected:

    $ make
    $ make test

If a test fails, it does not necessarily mean that all is horribly wrong. The tests compare numerics from simulations
run on different systems and especially small differences in energy drifts (very small numbers) may cause a test to fail.
To get verbose output from the tests, run:

    $ ctest -V

@page linkingyourown Making a new Faunus program

We'll here show three ways to link a new, external program to the Faunus library.

1. Using CMake
--------------

Start by making a new directory (anywhere you want), put your source file there,
and make a `CMakeLists.txt` file telling CMake about the new executable.
For example:

    $ cd $HOME/newproject
    $ cat hello.cpp

    #include <faunus/faunus.h>
    int main() {
      Faunus::Point a(0,0,0);
    }

    $ echo 'fau_example(hello "./" hello.cpp)' > CMakeLists.txt

Return to the main faunus directory and rerun `cmake` with the following command:

    $ cd $HOME/faunus
    $ cmake . -DMYPLAYGROUND=$HOME/newproject  # absolute path!

That's it! A `Makefile` for your new target, `hello`, has been generated and you can compile
directly from the `newproject` directory:

    $ cd $HOME/newproject
    $ make

Note that all options selected when configuring faunus will be applied to `hello` as well,
and any changes to the faunus code base will trigger re-compilation upon running `make`.

2. Using CMake and automatic faunus download
--------------------------------------------

Here we unleash CMake magic to automatically *download and build faunus*, as well as link it
to your program. Only two files are required:

-# Your source file, for example `hello.cpp` as above.
-# This `CMakeLists.txt` file:

       if (PROJECT_NAME MATCHES "Faunus")
         fau_example(hello "./" hello.cpp)
       else()
         cmake_minimum_required(VERSION 2.8)
         include(ExternalProject)
         ExternalProject_Add(faunus
           SVN_REVISION "-r877"   # remove for latest revision
           SVN_REPOSITORY http://svn.code.sf.net/p/faunus/code/trunk
           CMAKE_ARGS -DCMAKE_BUILD_TYPE=RelWithDebInfo -DMYPLAYGROUND=${CMAKE_SOURCE_DIR}
           INSTALL_COMMAND "")
       endif() 

Place both in a fresh directory and do:

    $ cmake .
    $ make
    $ make hello


3. Using manual linking
-----------------------

Linking can of course be done in the more traditional way by
compiling your program with `libfaunus`. For example:

    $ export faunus=$HOME/faunus
    $ c++ hello.cpp $faunus/src/libfaunus.so -I$faunus/include

This will, however, require that you manually set compiler options as well as macro definitions
compatible with your `libfaunus` build.


@page importantclasses Important Classes

A good place to start is to understand the following classes. Also, for a more grouped overview do have
a look at the Namespace list.

- Faunus::Point and derived classes.
  - All particles in Faunus are based on a 3D vector, Point, which in turn is based on the excellent
    Eigen library, <http://http://eigen.tuxfamily.org>. This means you have access
    to a wide range of powerful vector and matrix operations including geometric functions, much
    in the spirit of Numpy in Python.
    The class Faunus::Space is responsible for storing all particles in a STL vector.

- Faunus::InputMap
  - Reads user input parameters from a file in the format "keyword value". This class is frequently
    used in the constuctor arguments for other Faunus classes.

- Faunus::Geometry::Geometrybase and namespace Faunus::Geometry.
  - Derived classes define the simulation geometry (box, sphere, cylinder etc.) and take care
    of distance calculations as well as boundary conditions.

- Faunus::Group and derived classes
  - Simply defines a continuous range of particles in the Faunus::Space::p particle vector.
    Useful for defining molecules, salt groups etc. Groups contain functions for describing how to
    perform geometric operations (translate, rotate).

- Faunus::Energy::Hamiltonian
  - Sums interaction energies from multiple origins - bonded, non-bonded, external etc.

- Faunus::Move::Movebase
  - All Monte Carlo moves are based in this class which is responsible for making the
    move, calculating the energy difference, accepting/rejecting as well as collecting
    statistics. Derived classes are forced to obey certain rules which leads to an
    almost identicaly interface for all MC moves.
    See namespace Faunus::Move for an overview of available moves.

@page guidelines Coding Guidelines

Guidelines
==========

Naming Style
------------

Object                          | Example                     | Comment
:------------------------------ | :-------------------------- | :----------
Types and namespaces            | `class AtomicTranslation;`  | Mixed case starting with upper case
Member functions, functions     | `double getTemperature();`  | mixed case starting with lower case
Public variables (*avoid!*)     | `int numberOfParticles;`    | mixed case starting with lower case
Private variables               | `int _i;`                   | Underscore prefix 


Editing code
------------

- Document code using Doxygen tags - the
  [Markdown](http://www.stack.nl/~dimitri/doxygen/markdown.html) syntax is recommended.
- Set your editor to use a *white space* indentation of *two*.
  - VIM: add the following to `.vimrc`:
  ~~~
  set expandtab
  set shiftwidth=2
  set softtabstop=2
  ~~~

Design
------

Some good books on C++ design,

- [C++ Coding Standards](http://en.wikipedia.org/wiki/Special:BookSources/0321113586)
  by Sutter and Alexandrescu as well as
- [Effective C++](http://en.wikipedia.org/wiki/Special:BookSources/0321334876)
  by Meyers.

...and some very basic tips,

- Generously use C++'s [assert()](http://www.cplusplus.com/reference/clibrary/cassert/assert)
  command to easy debugging
- Recycle code with polymorphic designs
- Use compile-time polymophism (templates) for speed limiting steps
- Exploit STL libraries and C++11 features
- Hide data and functions as much as possible (i.e. make them private)
- Ensure [const-correctness](http://en.wikipedia.org/wiki/Const-correctness)
- Treat compiler warnings as errors

Committing code
---------------

Code additions are welcome: short contributions should be submitted to the
[ticket system](http://sourceforge.net/tracker/?group_id=196168&atid=956374),
while if you want to become a regular contributer you may apply for repository
write access.

Before submitting changes to the SVN repository please make sure nothing
is broken:

    $ make all
    $ make manual
    $ make test

Please, also try to verify SWIG modules:

    $ cmake -DENABLE_SWIG=on
    $ make _pyfaunus
    $ make test

@page license License
@verbinclude LICENSE

*/
