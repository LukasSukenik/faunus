/*!
@mainpage Welcome to Faunus!

____
![](faunus-textart.jpg)
____

Table of contents
=================

- [Overview / Readme](md_doc_README.html)
- @ref license
- Getting Started
  - @ref downloadbuild
  - @ref linkingyourown
  - @ref importantclasses
  - @ref videos
- Examples
  - @ref example_minimal 
  - @ref example_keesom
  - @ref example_bulk 
  - @ref example_grand 
  - @ref example_twobody
  - @ref example_GCMolecular
  - @ref example_water2
  - @ref example_polymers
  - @ref example_temper   
  - @ref example_penalty
  - @ref example_slitpolymer
  - @ref example_membrane
  - @ref example_cigars2fibrils
  - @ref example_stripes
- Development
  - @ref guidelines
  - @ref todo

@page videos Video Tutorials

### Download and compilation ###
@htmlonly
<iframe src="https://docs.google.com/file/d/0BzpLUBrTxmurRzN0RnFZc2lhZFE/preview" width="640" height="385"></iframe>
@endhtmlonly

@page downloadbuild Downloading and building Faunus

System Requirements
===================

Faunus compiles in most unix-like environment including Linux, MacOS,
and possibly also under Cygwin on Windows. The minimum requirements
are:

- [CMake 2.8+](http://www.cmake.org)
- C++11 compliant compiler

For more advanced features you may also need:

- MPI (mpich, openmpi)
- Openbabel
- Doxygen

Most major compilers support the C++11 features used in Faunus and for debugging and
development, the clang compiler is recommended whereas for speedy production runs,
gcc and intel are probably preferable. Below is a list of compilers, known to
work:

Compiler       | Version        | Comment
:------------- | :-----------   | :----------
GCC            | (4.6), 4.7+    | Good optimization
Clang          | 3.1+           | Good warning/error info
Intel Composer | 13+            | Pedantic warnings, good optimization


Getting the source code
=======================

Faunus is hosted on GitHub (http://github.com/mlund/faunus) and can be downloaded
by cloning the main repository:

    git clone https://github.com/mlund/faunus.git

If you intend to change and contribute to the project, consider making
a *fork* as explained in the [development guidelines](@ref guidelines).


Compiling
=========

Using the default compiler
--------------------------

Assuming the default compiler meets the minimum requirements,
simply do:

    $ cd faunus
    $ cmake . [options]
    $ make

All available build options are listed in the README
file - for example,

    $ cmake . -DENABLE_MPI=on -DCMAKE_BUILD_TYPE=Release

If you have installed `ccmake` you can also control the build settings
from a text based interface:

    $ ccmake .

Using a custom compiler
-----------------------

For compilers in non-standard locations or when multiple compilers
are installed, use the `CXX` and `CC` shell variables to guide cmake to
the desired compiler. For example:

    $ rm -fR CMakeCache.txt CMakeFiles
    $ export CXX=/opt/local/bin/g++
    $ export CC=/opt/local/bin/gcc
    $ cmake . [options]

Out of source build
-------------------

The above method builds Faunus directly in the `faunus` directory.
To leave the source directory untouched, use instead an *out-of-source build*.
This can be useful for making multiple builds with different settings or compilers.
To make an out-of-source build do:

    $ mkdir build
    $ cd build
    $ cmake ../faunus [options]
    $ make

Running the test suite
======================

Finally, after having build faunus as described above, run the test suite to check
if everything works as expected:

    $ make
    $ make test

If a test fails, it does not necessarily mean that all is horribly wrong.
The tests compare numerics from simulations run on different systems and especially small
differences in energy drifts (very small numbers) may cause a test to fail.
To get verbose output from the tests, run:

    $ ctest -V

@page linkingyourown Making a new Faunus program

We'll here show three ways to link a new, external program to the Faunus library.

1. Using CMake
--------------

Start by making a new directory (anywhere you want), put your source file there,
and make a `CMakeLists.txt` file telling CMake about the new executable.
For example:

    $ cd $HOME/newproject
    $ cat hello.cpp

    #include <faunus/faunus.h>
    int main() {
      Faunus::Point a(0,0,0);
    }

    $ echo 'fau_example(hello "./" hello.cpp)' > CMakeLists.txt

Return to the main faunus directory and rerun `cmake` with the following command:

    $ cd $HOME/faunus
    $ cmake . -DMYPLAYGROUND=$HOME/newproject  # absolute path!

That's it! A `Makefile` for your new target, `hello`, has been generated and you can compile
directly from the `newproject` directory:

    $ cd $HOME/newproject
    $ make

Note that all options selected when configuring faunus will be applied to `hello` as well,
and any changes to the faunus code base will trigger re-compilation upon running `make`.

2. Using CMake and automatic faunus download
--------------------------------------------

Here we unleash CMake magic to automatically *download and build faunus*, as well as link it
to your program. Only two files are required:

-# Your source file, for example `hello.cpp` as above.
-# This `CMakeLists.txt` file:

       if (PROJECT_NAME MATCHES "Faunus")
         fau_example(hello "./" hello.cpp)
       else()
         cmake_minimum_required(VERSION 2.8)
         include(ExternalProject)
         ExternalProject_Add(faunus
           GIT_REPOSITORY https://github.com/mlund/faunus
           CMAKE_ARGS -DCMAKE_BUILD_TYPE=RelWithDebInfo -DMYPLAYGROUND=${CMAKE_SOURCE_DIR}
           INSTALL_COMMAND "")
       endif() 

Place both in a fresh directory and do:

    $ cmake .
    $ make
    $ make hello


3. Using manual linking
-----------------------

Linking can also be done in the more traditional way by
compiling with `libfaunus`. For example:

    $ export faunus=$HOME/faunus
    $ c++ hello.cpp $faunus/src/libfaunus.so -I$faunus/include

This will, however, require that you manually set compiler options as well as macro definitions
compatible with your `libfaunus` build.


@page importantclasses Important Classes

A good place to start is to understand the following classes. Also, for a more grouped
overview do have a look at the Namespace list.

Class                                | Description
:----------------------------------- | :----------------------------------------------
`Faunus::Move::Propagator`           | Controls Monte Carlo moves
`Faunus::Analysis::CombinedAnalysis` | Controls analysis to be run during simulation
`Faunus::AtomData`                   | Defines atom properties
`Faunus::MoleculeData`               | Defines molecule properties
`Faunus::Space`                      | Contains all particles, molecules, and geometry
`Faunus::Group`                      | A range of particles

@page guidelines Coding Guidelines

Guidelines
==========

Naming Style
------------

Object                          | Example                     | Comment
:------------------------------ | :-------------------------- | :----------
Types and namespaces            | `class AtomicTranslation;`  | Mixed case starting with upper case
Member functions, functions     | `double getTemperature();`  | mixed case starting with lower case
Public variables (*avoid!*)     | `int numberOfParticles;`    | mixed case starting with lower case
Private variables               | `int _i;`                   | Underscore prefix 


Editing code
------------

- Document code using Doxygen tags - the
  [Markdown](http://www.stack.nl/~dimitri/doxygen/markdown.html) syntax is recommended.
- Set your editor to use a *white space* indentation of *two*.
  - VIM: add the following to `.vimrc`:
  ~~~
  set expandtab
  set shiftwidth=2
  set softtabstop=2
  ~~~

Design
------

Some books on C++ design,

- [C++ Coding Standards](http://en.wikipedia.org/wiki/Special:BookSources/0321113586)
  by Sutter and Alexandrescu as well as
- [Effective C++](http://en.wikipedia.org/wiki/Special:BookSources/0321334876)
  by Meyers.

A few basic tips,

- Generously use C++'s [assert()](http://www.cplusplus.com/reference/clibrary/cassert/assert)
  command to ease debugging
- Recycle code with polymorphic designs
- Use compile-time polymophism (templates) for speed limiting steps
- Use STL and Eigen where possible
- Hide data and functions as much as possible (i.e. make them private)
- Stride for [const-correctness](http://en.wikipedia.org/wiki/Const-correctness)
- Treat compiler warnings as errors

Committing code
---------------

To contribute to the Faunus project, first make a *fork* of the
repository and request changes to be added via a *pull request*.
Further instructions can be found on GitHub:

- [Forking a repository](http://help.github.com/articles/fork-a-repo)
- [Pull requests](http://help.github.com/articles/using-pull-requests)

Before submitting changes, please make sure nothing is broken:

    $ make all
    $ make manual
    $ make test

@page license License
@verbinclude LICENSE

*/
