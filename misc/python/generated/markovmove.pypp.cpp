// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "markovmove.pypp.hpp"

namespace bp = boost::python;

struct markovmove_wrapper : Faunus::markovmove, bp::wrapper< Faunus::markovmove > {

    markovmove_wrapper(Faunus::markovmove const & arg )
    : Faunus::markovmove( arg )
      , bp::wrapper< Faunus::markovmove >(){
        // copy constructor
        
    }

    markovmove_wrapper(::Faunus::ensemble & arg0, ::Faunus::container & arg1, ::Faunus::energybase & arg2 )
    : Faunus::markovmove( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2) )
      , bp::wrapper< Faunus::markovmove >(){
        // constructor
    
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::markovmove::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::markovmove::info( );
    }

    static ::Faunus::energybase * get_pot(Faunus::markovmove const & inst ){
        return inst.pot;
    }
    
    static void set_pot( Faunus::markovmove & inst, ::Faunus::energybase * new_value ){ 
        inst.pot = new_value;
    }

};

void register_markovmove_class(){

    { //::Faunus::markovmove
        typedef bp::class_< markovmove_wrapper > markovmove_exposer_t;
        markovmove_exposer_t markovmove_exposer = markovmove_exposer_t( "markovmove", bp::init< Faunus::ensemble &, Faunus::container &, Faunus::energybase & >(( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") )) );
        bp::scope markovmove_scope( markovmove_exposer );
        bp::enum_< Faunus::markovmove::keys>("keys")
            .value("OK", Faunus::markovmove::OK)
            .value("ENERGY", Faunus::markovmove::ENERGY)
            .value("HC", Faunus::markovmove::HC)
            .export_values()
            ;
        { //::Faunus::markovmove::accepted
        
            typedef float ( ::Faunus::markovmove::*accepted_function_type )(  ) ;
            
            markovmove_exposer.def( 
                "accepted"
                , accepted_function_type( &::Faunus::markovmove::accepted ) );
        
        }
        { //::Faunus::markovmove::adjust_dp
        
            typedef void ( ::Faunus::markovmove::*adjust_dp_function_type )( float,float ) ;
            
            markovmove_exposer.def( 
                "adjust_dp"
                , adjust_dp_function_type( &::Faunus::markovmove::adjust_dp )
                , ( bp::arg("arg0")=30, bp::arg("arg1")=40 ) );
        
        }
        { //::Faunus::markovmove::info
        
            typedef ::std::string ( ::Faunus::markovmove::*info_function_type )(  ) ;
            typedef ::std::string ( markovmove_wrapper::*default_info_function_type )(  ) ;
            
            markovmove_exposer.def( 
                "info"
                , info_function_type(&::Faunus::markovmove::info)
                , default_info_function_type(&markovmove_wrapper::default_info) );
        
        }
        { //::Faunus::markovmove::run
        
            typedef bool ( ::Faunus::markovmove::*run_function_type )( float ) ;
            
            markovmove_exposer.def( 
                "run"
                , run_function_type( &::Faunus::markovmove::run )
                , ( bp::arg("arg0") ) );
        
        }
        markovmove_exposer.def_readwrite( "dp", &Faunus::markovmove::dp );
        markovmove_exposer.def_readwrite( "du", &Faunus::markovmove::du );
        markovmove_exposer.def_readwrite( "name", &Faunus::markovmove::name );
        markovmove_exposer.add_property( "pot"
                    , bp::make_function( (::Faunus::energybase * (*)( ::Faunus::markovmove const & ))(&markovmove_wrapper::get_pot), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::Faunus::markovmove &,::Faunus::energybase * ))(&markovmove_wrapper::set_pot), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        markovmove_exposer.def_readwrite( "rc", &Faunus::markovmove::rc );
        markovmove_exposer.def_readwrite( "utot", &Faunus::markovmove::utot );
    }

}
