// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "inputfile.pypp.hpp"

namespace bp = boost::python;

void register_inputfile_class(){

    { //::Faunus::inputfile
        typedef bp::class_< Faunus::inputfile > inputfile_exposer_t;
        inputfile_exposer_t inputfile_exposer = inputfile_exposer_t( "inputfile", bp::init< std::string >(( bp::arg("arg0") )) );
        bp::scope inputfile_scope( inputfile_exposer );
        bp::implicitly_convertible< std::string, Faunus::inputfile >();
        { //::Faunus::inputfile::add
        
            typedef void ( ::Faunus::inputfile::*add_function_type )( ::std::string,::std::string ) ;
            
            inputfile_exposer.def( 
                "add"
                , add_function_type( &::Faunus::inputfile::add )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::inputfile::add
        
            typedef void ( ::Faunus::inputfile::*add_function_type )( ::std::string,double ) ;
            
            inputfile_exposer.def( 
                "add"
                , add_function_type( &::Faunus::inputfile::add )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::inputfile::getboo
        
            typedef bool ( ::Faunus::inputfile::*getboo_function_type )( ::std::string,bool ) ;
            
            inputfile_exposer.def( 
                "getboo"
                , getboo_function_type( &::Faunus::inputfile::getboo )
                , ( bp::arg("arg0"), bp::arg("arg1")=(bool)(false) ) );
        
        }
        { //::Faunus::inputfile::getflt
        
            typedef double ( ::Faunus::inputfile::*getflt_function_type )( ::std::string,double ) ;
            
            inputfile_exposer.def( 
                "getflt"
                , getflt_function_type( &::Faunus::inputfile::getflt )
                , ( bp::arg("arg0"), bp::arg("arg1")=0 ) );
        
        }
        { //::Faunus::inputfile::getint
        
            typedef int ( ::Faunus::inputfile::*getint_function_type )( ::std::string,int ) ;
            
            inputfile_exposer.def( 
                "getint"
                , getint_function_type( &::Faunus::inputfile::getint )
                , ( bp::arg("arg0"), bp::arg("arg1")=(int)(0) ) );
        
        }
        { //::Faunus::inputfile::getstr
        
            typedef ::std::string ( ::Faunus::inputfile::*getstr_function_type )( ::std::string,::std::string ) ;
            
            inputfile_exposer.def( 
                "getstr"
                , getstr_function_type( &::Faunus::inputfile::getstr )
                , ( bp::arg("arg0"), bp::arg("arg1")="" ) );
        
        }
        { //::Faunus::inputfile::getvec
        
            typedef ::std::vector< std::string > ( ::Faunus::inputfile::*getvec_function_type )( ::std::string,::std::string ) ;
            
            inputfile_exposer.def( 
                "getvec"
                , getvec_function_type( &::Faunus::inputfile::getvec )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::inputfile::info
        
            typedef ::std::string ( ::Faunus::inputfile::*info_function_type )(  ) ;
            
            inputfile_exposer.def( 
                "info"
                , info_function_type( &::Faunus::inputfile::info ) );
        
        }
        { //::Faunus::inputfile::print
        
            typedef ::std::string ( ::Faunus::inputfile::*print_function_type )(  ) ;
            
            inputfile_exposer.def( 
                "print"
                , print_function_type( &::Faunus::inputfile::print ) );
        
        }
        { //::Faunus::inputfile::updateval
        
            typedef void ( ::Faunus::inputfile::*updateval_function_type )( ::std::string,::std::string ) ;
            
            inputfile_exposer.def( 
                "updateval"
                , updateval_function_type( &::Faunus::inputfile::updateval )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
    }

}
