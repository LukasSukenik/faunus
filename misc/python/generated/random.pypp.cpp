// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "random.pypp.hpp"

namespace bp = boost::python;

struct random_wrapper : Faunus::random, bp::wrapper< Faunus::random > {

    random_wrapper()
    : Faunus::random()
      , bp::wrapper< Faunus::random >(){
        // null constructor
        
    }

    virtual double random_one(  ){
        bp::override func_random_one = this->get_override( "random_one" );
        return func_random_one(  );
    }

    virtual void random_seed( int arg0=0 ){
        bp::override func_random_seed = this->get_override( "random_seed" );
        func_random_seed( arg0 );
    }

};

void register_random_class(){

    bp::class_< random_wrapper, boost::noncopyable >( "random" )    
        .def( 
            "random_half"
            , (double ( ::Faunus::random::* )(  ) )( &::Faunus::random::random_half ) )    
        .def( 
            "random_one"
            , bp::pure_virtual( (double ( ::Faunus::random::* )(  ) )(&::Faunus::random::random_one) ) )    
        .def( 
            "random_seed"
            , bp::pure_virtual( (void ( ::Faunus::random::* )( int ) )(&::Faunus::random::random_seed) )
            , ( bp::arg("arg0")=(int)(0) ) )    
        .def( 
            "runtest"
            , (bool ( ::Faunus::random::* )( float ) )( &::Faunus::random::runtest )
            , ( bp::arg("arg0")=5.0e-1 ) );

}
