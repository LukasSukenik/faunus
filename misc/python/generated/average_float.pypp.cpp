// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "average_float.pypp.hpp"

namespace bp = boost::python;

struct average_less__float__greater__wrapper : Faunus::average< float >, bp::wrapper< Faunus::average< float > > {

    average_less__float__greater__wrapper(Faunus::average<float> const & arg )
    : Faunus::average<float>( arg )
      , bp::wrapper< Faunus::average< float > >(){
        // copy constructor
        
    }

    average_less__float__greater__wrapper( )
    : Faunus::average<float>( )
      , bp::wrapper< Faunus::average< float > >(){
        // null constructor
    
    }

    virtual void add( float x ) {
        if( bp::override func_add = this->get_override( "add" ) )
            func_add( x );
        else
            this->Faunus::average< float >::add( x );
    }
    
    
    void default_add( float x ) {
        Faunus::average< float >::add( x );
    }

};

void register_average_float_class(){

    bp::class_< average_less__float__greater__wrapper >( "average_float", bp::init< >() )    
        .def( 
            "add"
            , (void ( ::Faunus::average<float>::* )( float ) )(&::Faunus::average< float >::add)
            , (void ( average_less__float__greater__wrapper::* )( float ) )(&average_less__float__greater__wrapper::default_add)
            , ( bp::arg("x") ) )    
        .def( 
            "avg"
            , (float ( ::Faunus::average<float>::* )(  ) )( &::Faunus::average< float >::avg ) )    
        .def( bp::self + bp::self )    
        .def( bp::self += bp::other< float >() )    
        .def( bp::self == bp::self )    
        .def( 
            "reset"
            , (void ( ::Faunus::average<float>::* )(  ) )( &::Faunus::average< float >::reset ) )    
        .def( 
            "rms"
            , (float ( ::Faunus::average<float>::* )(  ) )( &::Faunus::average< float >::rms ) )    
        .def( 
            "stdev"
            , (float ( ::Faunus::average<float>::* )(  ) )( &::Faunus::average< float >::stdev ) )    
        .def_readwrite( "cnt", &Faunus::average< float >::cnt )    
        .def_readwrite( "sum", &Faunus::average< float >::sum );

}
