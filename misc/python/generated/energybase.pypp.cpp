// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "energybase.pypp.hpp"

namespace bp = boost::python;

struct energybase_wrapper : Faunus::energybase, bp::wrapper< Faunus::energybase > {

    energybase_wrapper(double f )
    : Faunus::energybase( f )
      , bp::wrapper< Faunus::energybase >(){
        // constructor
    
    }

    virtual double dipdip( ::Faunus::point const & arg0, ::Faunus::point const & arg1, double arg2 ){
        bp::override func_dipdip = this->get_override( "dipdip" );
        return func_dipdip( boost::ref(arg0), boost::ref(arg1), arg2 );
    }

    virtual double energy( ::Faunus::particle const & arg0, ::Faunus::particle const & arg1 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, ::Faunus::particle const & arg1 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, int arg1 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), arg1 );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, ::Faunus::group const & arg1 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, ::Faunus::group const & arg1, ::Faunus::group const & arg2 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, ::Faunus::group const & arg1, int arg2 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1), arg2 );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, ::Faunus::group const & arg1, ::Faunus::particle const & arg2 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, ::Faunus::molecules & arg1, ::std::vector< int > & arg2 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2) );
    }

    virtual double force( ::Faunus::container & arg0, ::Faunus::particle arg1, ::Faunus::particle arg2, ::Faunus::point arg3, double arg4, double arg5=5.0e-1 ){
        bp::override func_force = this->get_override( "force" );
        return func_force( boost::ref(arg0), arg1, arg2, arg3, arg4, arg5 );
    }

    virtual void forceall( ::Faunus::container & arg0, ::std::vector< Faunus::point > & arg1 ){
        bp::override func_forceall = this->get_override( "forceall" );
        func_forceall( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double internal( ::std::vector< Faunus::particle > const & arg0, ::Faunus::group const & arg1, int arg2=1 ){
        bp::override func_internal = this->get_override( "internal" );
        return func_internal( boost::ref(arg0), boost::ref(arg1), arg2 );
    }

    virtual double iondip( ::Faunus::point const & arg0, double arg1, double arg2 ){
        bp::override func_iondip = this->get_override( "iondip" );
        return func_iondip( boost::ref(arg0), arg1, arg2 );
    }

    virtual double pot( ::std::vector< Faunus::particle > const & arg0, ::Faunus::point const & arg1 ){
        bp::override func_pot = this->get_override( "pot" );
        return func_pot( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double potential( ::std::vector< Faunus::particle > const & arg0, short unsigned int arg1 ){
        bp::override func_potential = this->get_override( "potential" );
        return func_potential( boost::ref(arg0), arg1 );
    }

    virtual double potential( ::std::vector< Faunus::particle > const & arg0, ::Faunus::point arg1 ){
        bp::override func_potential = this->get_override( "potential" );
        return func_potential( boost::ref(arg0), arg1 );
    }

};

void register_energybase_class(){

    bp::class_< energybase_wrapper, boost::noncopyable >( "energybase", bp::init< double >(( bp::arg("f") )) )    
        .def( 
            "dipdip"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::Faunus::point const &,::Faunus::point const &,double ) )(&::Faunus::energybase::dipdip) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::particle const & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,int ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::group const & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,::Faunus::group const & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,int ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,::Faunus::particle const & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::molecules &,::std::vector< int > & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "force"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::Faunus::container &,::Faunus::particle,::Faunus::particle,::Faunus::point,double,double ) )(&::Faunus::energybase::force) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4"), bp::arg("arg5")=5.0e-1 ) )    
        .def( 
            "forceall"
            , bp::pure_virtual( (void ( ::Faunus::energybase::* )( ::Faunus::container &,::std::vector< Faunus::point > & ) )(&::Faunus::energybase::forceall) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "info"
            , (::std::string ( ::Faunus::energybase::* )(  ) )( &::Faunus::energybase::info ) )    
        .def( 
            "internal"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,int ) )(&::Faunus::energybase::internal) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2")=(int)(1) ) )    
        .def( 
            "iondip"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::Faunus::point const &,double,double ) )(&::Faunus::energybase::iondip) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "pot"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::point const & ) )(&::Faunus::energybase::pot) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "potential"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,short unsigned int ) )(&::Faunus::energybase::potential) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "potential"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::point ) )(&::Faunus::energybase::potential) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def_readwrite( "tokT", &Faunus::energybase::tokT );

}
