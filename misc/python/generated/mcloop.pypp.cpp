// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "mcloop.pypp.hpp"

namespace bp = boost::python;

void register_mcloop_class(){

    { //::Faunus::mcloop
        typedef bp::class_< Faunus::mcloop > mcloop_exposer_t;
        mcloop_exposer_t mcloop_exposer = mcloop_exposer_t( "mcloop", bp::init< Faunus::inputfile & >(( bp::arg("arg0") )) );
        bp::scope mcloop_scope( mcloop_exposer );
        bp::implicitly_convertible< Faunus::inputfile &, Faunus::mcloop >();
        { //::Faunus::mcloop::info
        
            typedef ::std::string ( ::Faunus::mcloop::*info_function_type )(  ) ;
            
            mcloop_exposer.def( 
                "info"
                , info_function_type( &::Faunus::mcloop::info ) );
        
        }
        { //::Faunus::mcloop::macroCnt
        
            typedef bool ( ::Faunus::mcloop::*macroCnt_function_type )(  ) ;
            
            mcloop_exposer.def( 
                "macroCnt"
                , macroCnt_function_type( &::Faunus::mcloop::macroCnt ) );
        
        }
        { //::Faunus::mcloop::microCnt
        
            typedef bool ( ::Faunus::mcloop::*microCnt_function_type )(  ) ;
            
            mcloop_exposer.def( 
                "microCnt"
                , microCnt_function_type( &::Faunus::mcloop::microCnt ) );
        
        }
        { //::Faunus::mcloop::timing
        
            typedef ::std::string ( ::Faunus::mcloop::*timing_function_type )( unsigned int ) ;
            
            mcloop_exposer.def( 
                "timing"
                , timing_function_type( &::Faunus::mcloop::timing )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::mcloop::timing
        
            typedef ::std::string ( ::Faunus::mcloop::*timing_function_type )(  ) ;
            
            mcloop_exposer.def( 
                "timing"
                , timing_function_type( &::Faunus::mcloop::timing ) );
        
        }
        mcloop_exposer.def_readwrite( "eq", &Faunus::mcloop::eq );
        mcloop_exposer.def_readwrite( "macro", &Faunus::mcloop::macro );
        mcloop_exposer.def_readwrite( "micro", &Faunus::mcloop::micro );
    }

}
