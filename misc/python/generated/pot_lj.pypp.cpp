// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "pot_lj.pypp.hpp"

namespace bp = boost::python;

struct pot_lj_wrapper : Faunus::pot_lj, bp::wrapper< Faunus::pot_lj > {

    pot_lj_wrapper(Faunus::pot_lj const & arg )
    : Faunus::pot_lj( arg )
      , bp::wrapper< Faunus::pot_lj >(){
        // copy constructor
        
    }

    pot_lj_wrapper(::Faunus::inputfile & in )
    : Faunus::pot_lj( boost::ref(in) )
      , bp::wrapper< Faunus::pot_lj >(){
        // constructor
    
    }

    pot_lj_wrapper(double epsilon )
    : Faunus::pot_lj( epsilon )
      , bp::wrapper< Faunus::pot_lj >(){
        // constructor
    
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::pot_lj::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::pot_lj::info( );
    }

    virtual void setvolume( double arg0 ) {
        if( bp::override func_setvolume = this->get_override( "setvolume" ) )
            func_setvolume( arg0 );
        else
            this->Faunus::pot_lj::setvolume( arg0 );
    }
    
    
    void default_setvolume( double arg0 ) {
        Faunus::pot_lj::setvolume( arg0 );
    }

};

void register_pot_lj_class(){

    { //::Faunus::pot_lj
        typedef bp::class_< pot_lj_wrapper > pot_lj_exposer_t;
        pot_lj_exposer_t pot_lj_exposer = pot_lj_exposer_t( "pot_lj", bp::init< Faunus::inputfile & >(( bp::arg("in") )) );
        bp::scope pot_lj_scope( pot_lj_exposer );
        bp::implicitly_convertible< Faunus::inputfile &, Faunus::pot_lj >();
        pot_lj_exposer.def( bp::init< double >(( bp::arg("epsilon") )) );
        bp::implicitly_convertible< double, Faunus::pot_lj >();
        { //::Faunus::pot_lj::info
        
            typedef ::std::string ( ::Faunus::pot_lj::*info_function_type )(  ) ;
            typedef ::std::string ( pot_lj_wrapper::*default_info_function_type )(  ) ;
            
            pot_lj_exposer.def( 
                "info"
                , info_function_type(&::Faunus::pot_lj::info)
                , default_info_function_type(&pot_lj_wrapper::default_info) );
        
        }
        { //::Faunus::pot_lj::lj
        
            typedef double ( ::Faunus::pot_lj::*lj_function_type )( ::Faunus::particle const &,::Faunus::particle const &,double const & ) const;
            
            pot_lj_exposer.def( 
                "lj"
                , lj_function_type( &::Faunus::pot_lj::lj )
                , ( bp::arg("p1"), bp::arg("p2"), bp::arg("r2") ) );
        
        }
        { //::Faunus::pot_lj::lj
        
            typedef void ( ::Faunus::pot_lj::*lj_function_type )( ::Faunus::particle const &,::Faunus::particle const &,double const &,double & ) const;
            
            pot_lj_exposer.def( 
                "lj"
                , lj_function_type( &::Faunus::pot_lj::lj )
                , ( bp::arg("p1"), bp::arg("p2"), bp::arg("r2"), bp::arg("u") ) );
        
        }
        { //::Faunus::pot_lj::setvolume
        
            typedef void ( ::Faunus::pot_lj::*setvolume_function_type )( double ) ;
            typedef void ( pot_lj_wrapper::*default_setvolume_function_type )( double ) ;
            
            pot_lj_exposer.def( 
                "setvolume"
                , setvolume_function_type(&::Faunus::pot_lj::setvolume)
                , default_setvolume_function_type(&pot_lj_wrapper::default_setvolume)
                , ( bp::arg("arg0") ) );
        
        }
        pot_lj_exposer.def_readwrite( "cite", &Faunus::pot_lj::cite );
        pot_lj_exposer.def_readwrite( "eps", &Faunus::pot_lj::eps );
        pot_lj_exposer.def_readwrite( "f", &Faunus::pot_lj::f );
        pot_lj_exposer.def_readwrite( "name", &Faunus::pot_lj::name );
    }

}
