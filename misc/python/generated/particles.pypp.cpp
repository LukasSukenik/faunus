// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "particles.pypp.hpp"

namespace bp = boost::python;

struct particles_wrapper : Faunus::particles, bp::wrapper< Faunus::particles > {

    particles_wrapper(Faunus::particles const & arg )
    : Faunus::particles( arg )
      , bp::wrapper< Faunus::particles >(){
        // copy constructor
        
    }

    particles_wrapper()
    : Faunus::particles()
      , bp::wrapper< Faunus::particles >(){
        // null constructor
        
    }

    virtual bool clash( ::Faunus::particle const & arg0, ::Faunus::particle const & arg1 ) {
        if( bp::override func_clash = this->get_override( "clash" ) )
            return func_clash( boost::ref(arg0), boost::ref(arg1) );
        else
            return this->Faunus::particles::clash( boost::ref(arg0), boost::ref(arg1) );
    }
    
    
    bool default_clash( ::Faunus::particle const & arg0, ::Faunus::particle const & arg1 ) {
        return Faunus::particles::clash( boost::ref(arg0), boost::ref(arg1) );
    }

};

void register_particles_class(){

    bp::class_< particles_wrapper >( "particles" )    
        .def( 
            "charge"
            , (double ( ::Faunus::particles::* )(  ) )( &::Faunus::particles::charge ) )    
        .def( 
            "charge"
            , (double ( ::Faunus::particles::* )( ::Faunus::point const &,double ) )( &::Faunus::particles::charge )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "check_vector"
            , (bool ( ::Faunus::particles::* )(  ) )( &::Faunus::particles::check_vector ) )    
        .def( 
            "clash"
            , (bool ( ::Faunus::particles::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&::Faunus::particles::clash)
            , (bool ( particles_wrapper::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&particles_wrapper::default_clash)
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "count"
            , (int ( ::Faunus::particles::* )( unsigned char,::Faunus::point const &,double ) )( &::Faunus::particles::count )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "insert"
            , (bool ( ::Faunus::particles::* )( ::Faunus::particle,unsigned int ) )( &::Faunus::particles::insert )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "list_of_species"
            , (::std::vector< unsigned char > ( ::Faunus::particles::* )(  ) const)( &::Faunus::particles::list_of_species ) )    
        .def( 
            "overlap"
            , (bool ( ::Faunus::particles::* )( ::Faunus::particle const & ) )( &::Faunus::particles::overlap )
            , ( bp::arg("arg0") ) )    
        .def( 
            "overlap"
            , (bool ( ::Faunus::particles::* )( ::std::vector< Faunus::particle > const & ) )( &::Faunus::particles::overlap )
            , ( bp::arg("arg0") ) )    
        .def( 
            "push_back"
            , (int ( ::Faunus::particles::* )( ::Faunus::particle const & ) )( &::Faunus::particles::push_back )
            , ( bp::arg("arg0") ) )    
        .def( 
            "remove"
            , (bool ( ::Faunus::particles::* )( unsigned int ) )( &::Faunus::particles::remove )
            , ( bp::arg("arg0") ) )    
        .def_readwrite( "p", &Faunus::particles::p )    
        .def_readwrite( "trial", &Faunus::particles::trial );

}
