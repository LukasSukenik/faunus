// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "particles.pypp.hpp"

namespace bp = boost::python;

void register_particles_class(){

    bp::class_< Faunus::particles, boost::noncopyable >( "particles", bp::no_init )    
        .def( 
            "charge"
            , (double ( ::Faunus::particles::* )(  ) )( &::Faunus::particles::charge ) )    
        .def( 
            "charge"
            , (double ( ::Faunus::particles::* )( ::Faunus::point const &,double ) )( &::Faunus::particles::charge )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "check_vector"
            , (bool ( ::Faunus::particles::* )(  ) )( &::Faunus::particles::check_vector ) )    
        .def( 
            "count"
            , (int ( ::Faunus::particles::* )( ::Faunus::particle::type,::Faunus::point const &,double ) )( &::Faunus::particles::count )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "insert"
            , (bool ( ::Faunus::particles::* )( ::Faunus::particle,unsigned int ) )( &::Faunus::particles::insert )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "list_of_species"
            , (::std::vector< Faunus::particle::type > ( ::Faunus::particles::* )(  ) const)( &::Faunus::particles::list_of_species ) )    
        .def( 
            "overlap"
            , (bool ( ::Faunus::particles::* )( ::Faunus::particle const & ) )( &::Faunus::particles::overlap )
            , ( bp::arg("arg0") ) )    
        .def( 
            "overlap"
            , (bool ( ::Faunus::particles::* )( ::std::vector< Faunus::particle > const & ) )( &::Faunus::particles::overlap )
            , ( bp::arg("arg0") ) )    
        .def( 
            "push_back"
            , (int ( ::Faunus::particles::* )( ::Faunus::particle const & ) )( &::Faunus::particles::push_back )
            , ( bp::arg("arg0") ) )    
        .def( 
            "remove"
            , (bool ( ::Faunus::particles::* )( unsigned int ) )( &::Faunus::particles::remove )
            , ( bp::arg("arg0") ) )    
        .def_readwrite( "p", &Faunus::particles::p )    
        .def_readwrite( "trial", &Faunus::particles::trial );

}
