// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "widom.pypp.hpp"

namespace bp = boost::python;

struct widom_wrapper : Faunus::widom, bp::wrapper< Faunus::widom > {

    widom_wrapper(Faunus::widom const & arg )
    : Faunus::widom( arg )
      , bp::wrapper< Faunus::widom >(){
        // copy constructor
        
    }

    widom_wrapper(int n=10 )
    : Faunus::widom( n )
      , bp::wrapper< Faunus::widom >(){
        // constructor
    
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::widom::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::widom::info( );
    }

};

void register_widom_class(){

    { //::Faunus::widom
        typedef bp::class_< widom_wrapper, bp::bases< Faunus::analysis > > widom_exposer_t;
        widom_exposer_t widom_exposer = widom_exposer_t( "widom", bp::init< bp::optional< int > >(( bp::arg("n")=(int)(10) )) );
        bp::scope widom_scope( widom_exposer );
        bp::implicitly_convertible< int, Faunus::widom >();
        { //::Faunus::widom::add
        
            typedef void ( ::Faunus::widom::*add_function_type )( ::Faunus::particle ) ;
            
            widom_exposer.def( 
                "add"
                , add_function_type( &::Faunus::widom::add )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::widom::add
        
            typedef void ( ::Faunus::widom::*add_function_type )( ::Faunus::container & ) ;
            
            widom_exposer.def( 
                "add"
                , add_function_type( &::Faunus::widom::add )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::widom::gamma
        
            typedef double ( ::Faunus::widom::*gamma_function_type )(  ) ;
            
            widom_exposer.def( 
                "gamma"
                , gamma_function_type( &::Faunus::widom::gamma ) );
        
        }
        { //::Faunus::widom::info
        
            typedef ::std::string ( ::Faunus::widom::*info_function_type )(  ) ;
            typedef ::std::string ( widom_wrapper::*default_info_function_type )(  ) ;
            
            widom_exposer.def( 
                "info"
                , info_function_type(&::Faunus::widom::info)
                , default_info_function_type(&widom_wrapper::default_info) );
        
        }
        { //::Faunus::widom::insert
        
            typedef void ( ::Faunus::widom::*insert_function_type )( ::Faunus::container &,::Faunus::energybase & ) ;
            
            widom_exposer.def( 
                "insert"
                , insert_function_type( &::Faunus::widom::insert )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::widom::muex
        
            typedef double ( ::Faunus::widom::*muex_function_type )(  ) ;
            
            widom_exposer.def( 
                "muex"
                , muex_function_type( &::Faunus::widom::muex ) );
        
        }
    }

}
