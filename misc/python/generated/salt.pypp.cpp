// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "salt.pypp.hpp"

namespace bp = boost::python;

struct salt_wrapper : Faunus::salt, bp::wrapper< Faunus::salt > {

    salt_wrapper(Faunus::salt const & arg )
    : Faunus::salt( arg )
      , bp::wrapper< Faunus::salt >(){
        // copy constructor
        
    }

    salt_wrapper(::Faunus::particle::type arg0=::Faunus::particle::NA, ::Faunus::particle::type arg1=::Faunus::particle::CL )
    : Faunus::salt( arg0, arg1 )
      , bp::wrapper< Faunus::salt >(){
        // constructor
    
    }

    virtual void isobaricmove( ::Faunus::container & arg0, double arg1 ) {
        if( bp::override func_isobaricmove = this->get_override( "isobaricmove" ) )
            func_isobaricmove( boost::ref(arg0), arg1 );
        else
            this->Faunus::salt::isobaricmove( boost::ref(arg0), arg1 );
    }
    
    
    void default_isobaricmove( ::Faunus::container & arg0, double arg1 ) {
        Faunus::salt::isobaricmove( boost::ref(arg0), arg1 );
    }

    virtual double charge( ::std::vector< Faunus::particle > const & arg0 ) {
        if( bp::override func_charge = this->get_override( "charge" ) )
            return func_charge( boost::ref(arg0) );
        else
            return this->Faunus::group::charge( boost::ref(arg0) );
    }
    
    
    double default_charge( ::std::vector< Faunus::particle > const & arg0 ) {
        return Faunus::group::charge( boost::ref(arg0) );
    }

    virtual short unsigned int displace( ::Faunus::container & arg0, ::Faunus::point arg1 ) {
        if( bp::override func_displace = this->get_override( "displace" ) )
            return func_displace( boost::ref(arg0), arg1 );
        else
            return this->Faunus::group::displace( boost::ref(arg0), arg1 );
    }
    
    
    short unsigned int default_displace( ::Faunus::container & arg0, ::Faunus::point arg1 ) {
        return Faunus::group::displace( boost::ref(arg0), arg1 );
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::group::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::group::info( );
    }

    virtual short unsigned int nummolecules(  ) {
        if( bp::override func_nummolecules = this->get_override( "nummolecules" ) )
            return func_nummolecules(  );
        else
            return this->Faunus::group::nummolecules(  );
    }
    
    
    short unsigned int default_nummolecules(  ) {
        return Faunus::group::nummolecules( );
    }

    virtual short int random(  ) {
        if( bp::override func_random = this->get_override( "random" ) )
            return func_random(  );
        else
            return this->Faunus::group::random(  );
    }
    
    
    short int default_random(  ) {
        return Faunus::group::random( );
    }

};

void register_salt_class(){

    bp::class_< salt_wrapper, bp::bases< Faunus::group > >( "salt", bp::init< bp::optional< Faunus::particle::type, Faunus::particle::type > >(( bp::arg("arg0")=::Faunus::particle::NA, bp::arg("arg1")=::Faunus::particle::CL )) )    
        .def( 
            "add"
            , (void ( ::Faunus::salt::* )( ::Faunus::container &,::Faunus::inputfile & ) )( &::Faunus::salt::add )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "info"
            , (::std::string ( ::Faunus::salt::* )( ::Faunus::container & ) )( &::Faunus::salt::info )
            , ( bp::arg("arg0") ) )    
        .def( 
            "isobaricmove"
            , (void ( ::Faunus::salt::* )( ::Faunus::container &,double ) )(&::Faunus::salt::isobaricmove)
            , (void ( salt_wrapper::* )( ::Faunus::container &,double ) )(&salt_wrapper::default_isobaricmove)
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def_readwrite( "anion", &Faunus::salt::anion )    
        .def_readwrite( "cation", &Faunus::salt::cation )    
        .def_readwrite( "muex", &Faunus::salt::muex )    
        .def( 
            "charge"
            , (double ( ::Faunus::group::* )( ::std::vector< Faunus::particle > const & ) )(&::Faunus::group::charge)
            , (double ( salt_wrapper::* )( ::std::vector< Faunus::particle > const & ) )(&salt_wrapper::default_charge)
            , ( bp::arg("arg0") ) )    
        .def( 
            "displace"
            , (short unsigned int ( ::Faunus::group::* )( ::Faunus::container &,::Faunus::point ) )(&::Faunus::group::displace)
            , (short unsigned int ( salt_wrapper::* )( ::Faunus::container &,::Faunus::point ) )(&salt_wrapper::default_displace)
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "info"
            , (::std::string ( ::Faunus::group::* )(  ) )(&::Faunus::group::info)
            , (::std::string ( salt_wrapper::* )(  ) )(&salt_wrapper::default_info) )    
        .def( 
            "nummolecules"
            , (short unsigned int ( ::Faunus::group::* )(  ) )(&::Faunus::group::nummolecules)
            , (short unsigned int ( salt_wrapper::* )(  ) )(&salt_wrapper::default_nummolecules) )    
        .def( 
            "random"
            , (short int ( ::Faunus::group::* )(  ) )(&::Faunus::group::random)
            , (short int ( salt_wrapper::* )(  ) )(&salt_wrapper::default_random) );

}
