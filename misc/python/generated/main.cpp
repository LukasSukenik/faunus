// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "faunus/common.h"

#include "faunus/point.h"

#include "faunus/particles.h"

#include "faunus/slump.h"

#include "faunus/inputfile.h"

#include "faunus/species.h"

#include "faunus/io.h"

#include "faunus/container.h"

#include "faunus/potentials/pot_coulomb.h"

#include "faunus/moves/base.h"

#include "faunus/moves/translational.h"

#include "faunus/group.h"

#include "faunus/analysis.h"

#include "faunus/widom.h"

#include "faunus/energy.h"

#include "faunus/ensemble.h"

#include "faunus/histogram.h"

#include "faunus/xytable.h"

namespace bp = boost::python;

struct analysis_wrapper : Faunus::analysis, bp::wrapper< Faunus::analysis > {

    analysis_wrapper( )
    : Faunus::analysis( )
      , bp::wrapper< Faunus::analysis >(){
        // null constructor
    
    }

    virtual ::std::string info(  ){
        bp::override func_info = this->get_override( "info" );
        return func_info(  );
    }

};

struct container_wrapper : Faunus::container, bp::wrapper< Faunus::container > {

    virtual void boundary( ::Faunus::point & arg0 ) {
        if( bp::override func_boundary = this->get_override( "boundary" ) )
            func_boundary( boost::ref(arg0) );
        else
            this->Faunus::container::boundary( boost::ref(arg0) );
    }
    
    
    void default_boundary( ::Faunus::point & arg0 ) {
        Faunus::container::boundary( boost::ref(arg0) );
    }

    virtual bool collision( ::Faunus::particle const & arg0 ){
        bp::override func_collision = this->get_override( "collision" );
        return func_collision( boost::ref(arg0) );
    }

    virtual bool collision( ::Faunus::particle const & arg0, ::Faunus::particle const & arg1 ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(arg0), boost::ref(arg1) );
        else
            return this->Faunus::container::collision( boost::ref(arg0), boost::ref(arg1) );
    }
    
    
    bool default_collision( ::Faunus::particle const & arg0, ::Faunus::particle const & arg1 ) {
        return Faunus::container::collision( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_dist = this->get_override( "dist" ) )
            return func_dist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::container::dist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::container::dist( boost::ref(a), boost::ref(b) );
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::container::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::container::info( );
    }

    virtual ::std::string povray(  ) {
        if( bp::override func_povray = this->get_override( "povray" ) )
            return func_povray(  );
        else
            return this->Faunus::container::povray(  );
    }
    
    
    ::std::string default_povray(  ) {
        return Faunus::container::povray( );
    }

    virtual void randompos( ::Faunus::point & arg0 ){
        bp::override func_randompos = this->get_override( "randompos" );
        func_randompos( boost::ref(arg0) );
    }

    virtual void scale( ::Faunus::point & arg0, double const & arg1 ) const  {
        if( bp::override func_scale = this->get_override( "scale" ) )
            func_scale( boost::ref(arg0), arg1 );
        else
            this->Faunus::container::scale( boost::ref(arg0), arg1 );
    }
    
    
    void default_scale( ::Faunus::point & arg0, double const & arg1 ) const  {
        Faunus::container::scale( boost::ref(arg0), arg1 );
    }

    virtual void setvolume( double arg0 ) {
        if( bp::override func_setvolume = this->get_override( "setvolume" ) )
            func_setvolume( arg0 );
        else
            this->Faunus::container::setvolume( arg0 );
    }
    
    
    void default_setvolume( double arg0 ) {
        Faunus::container::setvolume( arg0 );
    }

    virtual double sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_sqdist = this->get_override( "sqdist" ) )
            return func_sqdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::container::sqdist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::container::sqdist( boost::ref(a), boost::ref(b) );
    }

    virtual ::Faunus::point vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_vdist = this->get_override( "vdist" ) )
            return func_vdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::container::vdist( boost::ref(a), boost::ref(b) );
    }
    
    
    ::Faunus::point default_vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::container::vdist( boost::ref(a), boost::ref(b) );
    }

};

struct box_wrapper : Faunus::box, bp::wrapper< Faunus::box > {

    box_wrapper(double arg0 )
    : Faunus::box( arg0 )
      , bp::wrapper< Faunus::box >(){
        // constructor
    
    }

    box_wrapper(::Faunus::inputfile & arg0 )
    : Faunus::box( boost::ref(arg0) )
      , bp::wrapper< Faunus::box >(){
        // constructor
    
    }

    virtual void boundary( ::Faunus::point & a ) {
        if( bp::override func_boundary = this->get_override( "boundary" ) )
            func_boundary( boost::ref(a) );
        else
            this->Faunus::box::boundary( boost::ref(a) );
    }
    
    
    void default_boundary( ::Faunus::point & a ) {
        Faunus::box::boundary( boost::ref(a) );
    }

    virtual bool collision( ::Faunus::particle const & a ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(a) );
        else
            return this->Faunus::box::collision( boost::ref(a) );
    }
    
    
    bool default_collision( ::Faunus::particle const & a ) {
        return Faunus::box::collision( boost::ref(a) );
    }

    virtual bool collision( ::Faunus::particle const & a, ::Faunus::particle const & b ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::collision( boost::ref(a), boost::ref(b) );
    }
    
    
    bool default_collision( ::Faunus::particle const & a, ::Faunus::particle const & b ) {
        return Faunus::box::collision( boost::ref(a), boost::ref(b) );
    }

    virtual double dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_dist = this->get_override( "dist" ) )
            return func_dist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::dist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::box::dist( boost::ref(a), boost::ref(b) );
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::box::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::box::info( );
    }

    virtual ::std::string povray(  ) {
        if( bp::override func_povray = this->get_override( "povray" ) )
            return func_povray(  );
        else
            return this->Faunus::box::povray(  );
    }
    
    
    ::std::string default_povray(  ) {
        return Faunus::box::povray( );
    }

    virtual void randompos( ::Faunus::point & arg0 ) {
        if( bp::override func_randompos = this->get_override( "randompos" ) )
            func_randompos( boost::ref(arg0) );
        else
            this->Faunus::box::randompos( boost::ref(arg0) );
    }
    
    
    void default_randompos( ::Faunus::point & arg0 ) {
        Faunus::box::randompos( boost::ref(arg0) );
    }

    virtual void scale( ::Faunus::point & a, double const & newlen ) const  {
        if( bp::override func_scale = this->get_override( "scale" ) )
            func_scale( boost::ref(a), newlen );
        else
            this->Faunus::box::scale( boost::ref(a), newlen );
    }
    
    
    void default_scale( ::Faunus::point & a, double const & newlen ) const  {
        Faunus::box::scale( boost::ref(a), newlen );
    }

    virtual void setvolume( double arg0 ) {
        if( bp::override func_setvolume = this->get_override( "setvolume" ) )
            func_setvolume( arg0 );
        else
            this->Faunus::box::setvolume( arg0 );
    }
    
    
    void default_setvolume( double arg0 ) {
        Faunus::box::setvolume( arg0 );
    }

    virtual double sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_sqdist = this->get_override( "sqdist" ) )
            return func_sqdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::sqdist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::box::sqdist( boost::ref(a), boost::ref(b) );
    }

    virtual ::Faunus::point vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_vdist = this->get_override( "vdist" ) )
            return func_vdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::vdist( boost::ref(a), boost::ref(b) );
    }
    
    
    ::Faunus::point default_vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::box::vdist( boost::ref(a), boost::ref(b) );
    }

};

struct cell_wrapper : Faunus::cell, bp::wrapper< Faunus::cell > {

    cell_wrapper(double arg0 )
    : Faunus::cell( arg0 )
      , bp::wrapper< Faunus::cell >(){
        // constructor
    
    }

    cell_wrapper(::Faunus::inputfile & arg0 )
    : Faunus::cell( boost::ref(arg0) )
      , bp::wrapper< Faunus::cell >(){
        // constructor
    
    }

    virtual bool collision( ::Faunus::particle const & a ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(a) );
        else
            return this->Faunus::cell::collision( boost::ref(a) );
    }
    
    
    bool default_collision( ::Faunus::particle const & a ) {
        return Faunus::cell::collision( boost::ref(a) );
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::cell::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::cell::info( );
    }

    virtual ::std::string povray(  ) {
        if( bp::override func_povray = this->get_override( "povray" ) )
            return func_povray(  );
        else
            return this->Faunus::cell::povray(  );
    }
    
    
    ::std::string default_povray(  ) {
        return Faunus::cell::povray( );
    }

    virtual void randompos( ::Faunus::point & arg0 ) {
        if( bp::override func_randompos = this->get_override( "randompos" ) )
            func_randompos( boost::ref(arg0) );
        else
            this->Faunus::cell::randompos( boost::ref(arg0) );
    }
    
    
    void default_randompos( ::Faunus::point & arg0 ) {
        Faunus::cell::randompos( boost::ref(arg0) );
    }

    virtual void boundary( ::Faunus::point & arg0 ) {
        if( bp::override func_boundary = this->get_override( "boundary" ) )
            func_boundary( boost::ref(arg0) );
        else
            this->Faunus::container::boundary( boost::ref(arg0) );
    }
    
    
    void default_boundary( ::Faunus::point & arg0 ) {
        Faunus::container::boundary( boost::ref(arg0) );
    }

    virtual bool collision( ::Faunus::particle const & arg0, ::Faunus::particle const & arg1 ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(arg0), boost::ref(arg1) );
        else
            return this->Faunus::container::collision( boost::ref(arg0), boost::ref(arg1) );
    }
    
    
    bool default_collision( ::Faunus::particle const & arg0, ::Faunus::particle const & arg1 ) {
        return Faunus::container::collision( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_dist = this->get_override( "dist" ) )
            return func_dist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::container::dist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::container::dist( boost::ref(a), boost::ref(b) );
    }

    virtual void scale( ::Faunus::point & arg0, double const & arg1 ) const  {
        if( bp::override func_scale = this->get_override( "scale" ) )
            func_scale( boost::ref(arg0), arg1 );
        else
            this->Faunus::container::scale( boost::ref(arg0), arg1 );
    }
    
    
    void default_scale( ::Faunus::point & arg0, double const & arg1 ) const  {
        Faunus::container::scale( boost::ref(arg0), arg1 );
    }

    virtual void setvolume( double arg0 ) {
        if( bp::override func_setvolume = this->get_override( "setvolume" ) )
            func_setvolume( arg0 );
        else
            this->Faunus::container::setvolume( arg0 );
    }
    
    
    void default_setvolume( double arg0 ) {
        Faunus::container::setvolume( arg0 );
    }

    virtual double sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_sqdist = this->get_override( "sqdist" ) )
            return func_sqdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::container::sqdist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::container::sqdist( boost::ref(a), boost::ref(b) );
    }

    virtual ::Faunus::point vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_vdist = this->get_override( "vdist" ) )
            return func_vdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::container::vdist( boost::ref(a), boost::ref(b) );
    }
    
    
    ::Faunus::point default_vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::container::vdist( boost::ref(a), boost::ref(b) );
    }

};

struct clutch_wrapper : Faunus::clutch, bp::wrapper< Faunus::clutch > {

    clutch_wrapper(double arg0, double arg1, double arg2 )
    : Faunus::clutch( arg0, arg1, arg2 )
      , bp::wrapper< Faunus::clutch >(){
        // constructor
    
    }

    virtual bool collision( ::Faunus::particle const & a ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(a) );
        else
            return this->Faunus::clutch::collision( boost::ref(a) );
    }
    
    
    bool default_collision( ::Faunus::particle const & a ) {
        return Faunus::clutch::collision( boost::ref(a) );
    }

    virtual void randompos( ::Faunus::point & arg0 ) {
        if( bp::override func_randompos = this->get_override( "randompos" ) )
            func_randompos( boost::ref(arg0) );
        else
            this->Faunus::clutch::randompos( boost::ref(arg0) );
    }
    
    
    void default_randompos( ::Faunus::point & arg0 ) {
        Faunus::clutch::randompos( boost::ref(arg0) );
    }

    virtual void boundary( ::Faunus::point & arg0 ) {
        if( bp::override func_boundary = this->get_override( "boundary" ) )
            func_boundary( boost::ref(arg0) );
        else
            this->Faunus::container::boundary( boost::ref(arg0) );
    }
    
    
    void default_boundary( ::Faunus::point & arg0 ) {
        Faunus::container::boundary( boost::ref(arg0) );
    }

    virtual bool collision( ::Faunus::particle const & arg0, ::Faunus::particle const & arg1 ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(arg0), boost::ref(arg1) );
        else
            return this->Faunus::container::collision( boost::ref(arg0), boost::ref(arg1) );
    }
    
    
    bool default_collision( ::Faunus::particle const & arg0, ::Faunus::particle const & arg1 ) {
        return Faunus::container::collision( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_dist = this->get_override( "dist" ) )
            return func_dist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::container::dist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::container::dist( boost::ref(a), boost::ref(b) );
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::container::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::container::info( );
    }

    virtual ::std::string povray(  ) {
        if( bp::override func_povray = this->get_override( "povray" ) )
            return func_povray(  );
        else
            return this->Faunus::container::povray(  );
    }
    
    
    ::std::string default_povray(  ) {
        return Faunus::container::povray( );
    }

    virtual void scale( ::Faunus::point & arg0, double const & arg1 ) const  {
        if( bp::override func_scale = this->get_override( "scale" ) )
            func_scale( boost::ref(arg0), arg1 );
        else
            this->Faunus::container::scale( boost::ref(arg0), arg1 );
    }
    
    
    void default_scale( ::Faunus::point & arg0, double const & arg1 ) const  {
        Faunus::container::scale( boost::ref(arg0), arg1 );
    }

    virtual void setvolume( double arg0 ) {
        if( bp::override func_setvolume = this->get_override( "setvolume" ) )
            func_setvolume( arg0 );
        else
            this->Faunus::container::setvolume( arg0 );
    }
    
    
    void default_setvolume( double arg0 ) {
        Faunus::container::setvolume( arg0 );
    }

    virtual double sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_sqdist = this->get_override( "sqdist" ) )
            return func_sqdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::container::sqdist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::container::sqdist( boost::ref(a), boost::ref(b) );
    }

    virtual ::Faunus::point vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_vdist = this->get_override( "vdist" ) )
            return func_vdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::container::vdist( boost::ref(a), boost::ref(b) );
    }
    
    
    ::Faunus::point default_vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::container::vdist( boost::ref(a), boost::ref(b) );
    }

};

struct cylinder_wrapper : Faunus::cylinder, bp::wrapper< Faunus::cylinder > {

    cylinder_wrapper(double arg0, double arg1 )
    : Faunus::cylinder( arg0, arg1 )
      , bp::wrapper< Faunus::cylinder >(){
        // constructor
    
    }

    virtual bool collision( ::Faunus::particle const & a ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(a) );
        else
            return this->Faunus::cylinder::collision( boost::ref(a) );
    }
    
    
    bool default_collision( ::Faunus::particle const & a ) {
        return Faunus::cylinder::collision( boost::ref(a) );
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::cylinder::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::cylinder::info( );
    }

    virtual ::std::string povray(  ) {
        if( bp::override func_povray = this->get_override( "povray" ) )
            return func_povray(  );
        else
            return this->Faunus::cylinder::povray(  );
    }
    
    
    ::std::string default_povray(  ) {
        return Faunus::cylinder::povray( );
    }

    virtual void randompos( ::Faunus::point & arg0 ) {
        if( bp::override func_randompos = this->get_override( "randompos" ) )
            func_randompos( boost::ref(arg0) );
        else
            this->Faunus::cylinder::randompos( boost::ref(arg0) );
    }
    
    
    void default_randompos( ::Faunus::point & arg0 ) {
        Faunus::cylinder::randompos( boost::ref(arg0) );
    }

    virtual void boundary( ::Faunus::point & arg0 ) {
        if( bp::override func_boundary = this->get_override( "boundary" ) )
            func_boundary( boost::ref(arg0) );
        else
            this->Faunus::container::boundary( boost::ref(arg0) );
    }
    
    
    void default_boundary( ::Faunus::point & arg0 ) {
        Faunus::container::boundary( boost::ref(arg0) );
    }

    virtual bool collision( ::Faunus::particle const & arg0, ::Faunus::particle const & arg1 ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(arg0), boost::ref(arg1) );
        else
            return this->Faunus::container::collision( boost::ref(arg0), boost::ref(arg1) );
    }
    
    
    bool default_collision( ::Faunus::particle const & arg0, ::Faunus::particle const & arg1 ) {
        return Faunus::container::collision( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_dist = this->get_override( "dist" ) )
            return func_dist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::container::dist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::container::dist( boost::ref(a), boost::ref(b) );
    }

    virtual void scale( ::Faunus::point & arg0, double const & arg1 ) const  {
        if( bp::override func_scale = this->get_override( "scale" ) )
            func_scale( boost::ref(arg0), arg1 );
        else
            this->Faunus::container::scale( boost::ref(arg0), arg1 );
    }
    
    
    void default_scale( ::Faunus::point & arg0, double const & arg1 ) const  {
        Faunus::container::scale( boost::ref(arg0), arg1 );
    }

    virtual void setvolume( double arg0 ) {
        if( bp::override func_setvolume = this->get_override( "setvolume" ) )
            func_setvolume( arg0 );
        else
            this->Faunus::container::setvolume( arg0 );
    }
    
    
    void default_setvolume( double arg0 ) {
        Faunus::container::setvolume( arg0 );
    }

    virtual double sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_sqdist = this->get_override( "sqdist" ) )
            return func_sqdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::container::sqdist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::container::sqdist( boost::ref(a), boost::ref(b) );
    }

    virtual ::Faunus::point vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_vdist = this->get_override( "vdist" ) )
            return func_vdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::container::vdist( boost::ref(a), boost::ref(b) );
    }
    
    
    ::Faunus::point default_vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::container::vdist( boost::ref(a), boost::ref(b) );
    }

};

struct energybase_wrapper : Faunus::energybase, bp::wrapper< Faunus::energybase > {

    energybase_wrapper(double f )
    : Faunus::energybase( f )
      , bp::wrapper< Faunus::energybase >(){
        // constructor
    
    }

    virtual double dipdip( ::Faunus::point const & arg0, ::Faunus::point const & arg1, double arg2 ){
        bp::override func_dipdip = this->get_override( "dipdip" );
        return func_dipdip( boost::ref(arg0), boost::ref(arg1), arg2 );
    }

    virtual double energy( ::Faunus::particle const & arg0, ::Faunus::particle const & arg1 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, ::Faunus::particle const & arg1 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, int arg1 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), arg1 );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, ::Faunus::group const & arg1 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, ::Faunus::group const & arg1, ::Faunus::group const & arg2 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, ::Faunus::group const & arg1, int arg2 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1), arg2 );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & arg0, ::Faunus::group const & arg1, ::Faunus::particle const & arg2 ){
        bp::override func_energy = this->get_override( "energy" );
        return func_energy( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2) );
    }

    virtual double force( ::Faunus::container & arg0, ::Faunus::particle arg1, ::Faunus::particle arg2, double arg3, double arg4=5.0e-1 ){
        bp::override func_force = this->get_override( "force" );
        return func_force( boost::ref(arg0), arg1, arg2, arg3, arg4 );
    }

    virtual void forceall( ::Faunus::container & arg0, ::std::vector< Faunus::point > & arg1 ){
        bp::override func_forceall = this->get_override( "forceall" );
        func_forceall( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double internal( ::std::vector< Faunus::particle > const & arg0, ::Faunus::group const & arg1, int arg2=1 ){
        bp::override func_internal = this->get_override( "internal" );
        return func_internal( boost::ref(arg0), boost::ref(arg1), arg2 );
    }

    virtual double iondip( ::Faunus::point const & arg0, double arg1, double arg2 ){
        bp::override func_iondip = this->get_override( "iondip" );
        return func_iondip( boost::ref(arg0), arg1, arg2 );
    }

    virtual double pot( ::std::vector< Faunus::particle > const & arg0, ::Faunus::point const & arg1 ){
        bp::override func_pot = this->get_override( "pot" );
        return func_pot( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double potential( ::std::vector< Faunus::particle > const & arg0, short unsigned int arg1 ){
        bp::override func_potential = this->get_override( "potential" );
        return func_potential( boost::ref(arg0), arg1 );
    }

    virtual double potential( ::std::vector< Faunus::particle > const & arg0, ::Faunus::point arg1 ){
        bp::override func_potential = this->get_override( "potential" );
        return func_potential( boost::ref(arg0), arg1 );
    }

};

struct group_wrapper : Faunus::group, bp::wrapper< Faunus::group > {

    group_wrapper(int arg0=0 )
    : Faunus::group( arg0 )
      , bp::wrapper< Faunus::group >(){
        // constructor
    
    }

    virtual double charge( ::std::vector< Faunus::particle > const & arg0 ) {
        if( bp::override func_charge = this->get_override( "charge" ) )
            return func_charge( boost::ref(arg0) );
        else
            return this->Faunus::group::charge( boost::ref(arg0) );
    }
    
    
    double default_charge( ::std::vector< Faunus::particle > const & arg0 ) {
        return Faunus::group::charge( boost::ref(arg0) );
    }

    virtual short unsigned int displace( ::Faunus::container & arg0, double arg1 ) {
        if( bp::override func_displace = this->get_override( "displace" ) )
            return func_displace( boost::ref(arg0), arg1 );
        else
            return this->Faunus::group::displace( boost::ref(arg0), arg1 );
    }
    
    
    short unsigned int default_displace( ::Faunus::container & arg0, double arg1 ) {
        return Faunus::group::displace( boost::ref(arg0), arg1 );
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::group::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::group::info( );
    }

    virtual void isobaricmove( ::Faunus::container & arg0, double arg1 ) {
        if( bp::override func_isobaricmove = this->get_override( "isobaricmove" ) )
            func_isobaricmove( boost::ref(arg0), arg1 );
        else
            this->Faunus::group::isobaricmove( boost::ref(arg0), arg1 );
    }
    
    
    void default_isobaricmove( ::Faunus::container & arg0, double arg1 ) {
        Faunus::group::isobaricmove( boost::ref(arg0), arg1 );
    }

    virtual short unsigned int nummolecules(  ) {
        if( bp::override func_nummolecules = this->get_override( "nummolecules" ) )
            return func_nummolecules(  );
        else
            return this->Faunus::group::nummolecules(  );
    }
    
    
    short unsigned int default_nummolecules(  ) {
        return Faunus::group::nummolecules( );
    }

    virtual short int random(  ) {
        if( bp::override func_random = this->get_override( "random" ) )
            return func_random(  );
        else
            return this->Faunus::group::random(  );
    }
    
    
    short int default_random(  ) {
        return Faunus::group::random( );
    }

};

struct interaction_less__Faunus_scope_pot_coulomb__greater__wrapper : Faunus::interaction< Faunus::pot_coulomb >, bp::wrapper< Faunus::interaction< Faunus::pot_coulomb > > {

    interaction_less__Faunus_scope_pot_coulomb__greater__wrapper(::Faunus::inputfile & in )
    : Faunus::interaction<Faunus::pot_coulomb>( boost::ref(in) )
      , bp::wrapper< Faunus::interaction< Faunus::pot_coulomb > >(){
        // constructor
    
    }

    virtual double dipdip( ::Faunus::point const & a, ::Faunus::point const & b, double r ) {
        if( bp::override func_dipdip = this->get_override( "dipdip" ) )
            return func_dipdip( boost::ref(a), boost::ref(b), r );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::dipdip( boost::ref(a), boost::ref(b), r );
    }
    
    
    double default_dipdip( ::Faunus::point const & a, ::Faunus::point const & b, double r ) {
        return Faunus::interaction< Faunus::pot_coulomb >::dipdip( boost::ref(a), boost::ref(b), r );
    }

    virtual double energy( ::Faunus::particle const & a, ::Faunus::particle const & b ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_energy( ::Faunus::particle const & a, ::Faunus::particle const & b ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(a), boost::ref(b) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, int j ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), j );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), j );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, int j ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), j );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), boost::ref(g) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g) );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g, int j ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), boost::ref(g), j );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g), j );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g, int j ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g), j );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g, ::Faunus::particle const & a ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), boost::ref(g), boost::ref(a) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g), boost::ref(a) );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g, ::Faunus::particle const & a ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g), boost::ref(a) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p) );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g1, ::Faunus::group const & g2 ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), boost::ref(g1), boost::ref(g2) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g1), boost::ref(g2) );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g1, ::Faunus::group const & g2 ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g1), boost::ref(g2) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, ::Faunus::particle const & a ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), boost::ref(a) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(a) );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, ::Faunus::particle const & a ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(a) );
    }

    virtual double force( ::Faunus::container & c, ::Faunus::particle a, ::Faunus::particle b, double r, double dr ) {
        if( bp::override func_force = this->get_override( "force" ) )
            return func_force( boost::ref(c), a, b, r, dr );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::force( boost::ref(c), a, b, r, dr );
    }
    
    
    double default_force( ::Faunus::container & c, ::Faunus::particle a, ::Faunus::particle b, double r, double dr ) {
        return Faunus::interaction< Faunus::pot_coulomb >::force( boost::ref(c), a, b, r, dr );
    }

    virtual void forceall( ::Faunus::container & c, ::std::vector< Faunus::point > & f ) {
        if( bp::override func_forceall = this->get_override( "forceall" ) )
            func_forceall( boost::ref(c), boost::ref(f) );
        else
            this->Faunus::interaction< Faunus::pot_coulomb >::forceall( boost::ref(c), boost::ref(f) );
    }
    
    
    void default_forceall( ::Faunus::container & c, ::std::vector< Faunus::point > & f ) {
        Faunus::interaction< Faunus::pot_coulomb >::forceall( boost::ref(c), boost::ref(f) );
    }

    virtual double internal( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g, int step=1 ) {
        if( bp::override func_internal = this->get_override( "internal" ) )
            return func_internal( boost::ref(p), boost::ref(g), step );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::internal( boost::ref(p), boost::ref(g), step );
    }
    
    
    double default_internal( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g, int step=1 ) {
        return Faunus::interaction< Faunus::pot_coulomb >::internal( boost::ref(p), boost::ref(g), step );
    }

    virtual double iondip( ::Faunus::point const & a, double q, double r ) {
        if( bp::override func_iondip = this->get_override( "iondip" ) )
            return func_iondip( boost::ref(a), q, r );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::iondip( boost::ref(a), q, r );
    }
    
    
    double default_iondip( ::Faunus::point const & a, double q, double r ) {
        return Faunus::interaction< Faunus::pot_coulomb >::iondip( boost::ref(a), q, r );
    }

    virtual double pot( ::std::vector< Faunus::particle > const & p, ::Faunus::point const & a ) {
        if( bp::override func_pot = this->get_override( "pot" ) )
            return func_pot( boost::ref(p), boost::ref(a) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::pot( boost::ref(p), boost::ref(a) );
    }
    
    
    double default_pot( ::std::vector< Faunus::particle > const & p, ::Faunus::point const & a ) {
        return Faunus::interaction< Faunus::pot_coulomb >::pot( boost::ref(p), boost::ref(a) );
    }

    virtual double potential( ::std::vector< Faunus::particle > const & p, short unsigned int j ) {
        if( bp::override func_potential = this->get_override( "potential" ) )
            return func_potential( boost::ref(p), j );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::potential( boost::ref(p), j );
    }
    
    
    double default_potential( ::std::vector< Faunus::particle > const & p, short unsigned int j ) {
        return Faunus::interaction< Faunus::pot_coulomb >::potential( boost::ref(p), j );
    }

    virtual double potential( ::std::vector< Faunus::particle > const & p, ::Faunus::point a ) {
        if( bp::override func_potential = this->get_override( "potential" ) )
            return func_potential( boost::ref(p), a );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::potential( boost::ref(p), a );
    }
    
    
    double default_potential( ::std::vector< Faunus::particle > const & p, ::Faunus::point a ) {
        return Faunus::interaction< Faunus::pot_coulomb >::potential( boost::ref(p), a );
    }

};

struct markovmove_wrapper : Faunus::markovmove, bp::wrapper< Faunus::markovmove > {

    markovmove_wrapper(::Faunus::ensemble & arg0, ::Faunus::container & arg1, ::Faunus::energybase & arg2 )
    : Faunus::markovmove( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2) )
      , bp::wrapper< Faunus::markovmove >(){
        // constructor
    
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::markovmove::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::markovmove::info( );
    }

    static ::Faunus::energybase * get_pot(Faunus::markovmove const & inst ){
        return inst.pot;
    }
    
    static void set_pot( Faunus::markovmove & inst, ::Faunus::energybase * new_value ){ 
        inst.pot = new_value;
    }

};

struct pot_lj_wrapper : Faunus::pot_lj, bp::wrapper< Faunus::pot_lj > {

    pot_lj_wrapper(Faunus::pot_lj const & arg )
    : Faunus::pot_lj( arg )
      , bp::wrapper< Faunus::pot_lj >(){
        // copy constructor
        
    }

    pot_lj_wrapper(::Faunus::inputfile & in )
    : Faunus::pot_lj( boost::ref(in) )
      , bp::wrapper< Faunus::pot_lj >(){
        // constructor
    
    }

    pot_lj_wrapper(double epsilon )
    : Faunus::pot_lj( epsilon )
      , bp::wrapper< Faunus::pot_lj >(){
        // constructor
    
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::pot_lj::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::pot_lj::info( );
    }

    virtual void setvolume( double arg0 ) {
        if( bp::override func_setvolume = this->get_override( "setvolume" ) )
            func_setvolume( arg0 );
        else
            this->Faunus::pot_lj::setvolume( arg0 );
    }
    
    
    void default_setvolume( double arg0 ) {
        Faunus::pot_lj::setvolume( arg0 );
    }

};

struct pot_coulomb_wrapper : Faunus::pot_coulomb, bp::wrapper< Faunus::pot_coulomb > {

    pot_coulomb_wrapper(Faunus::pot_coulomb const & arg )
    : Faunus::pot_coulomb( arg )
      , bp::wrapper< Faunus::pot_coulomb >(){
        // copy constructor
        
    }

    pot_coulomb_wrapper(::Faunus::inputfile & in )
    : Faunus::pot_coulomb( boost::ref(in) )
      , bp::wrapper< Faunus::pot_coulomb >(){
        // constructor
    
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::pot_coulomb::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::pot_coulomb::info( );
    }

    virtual void setvolume( double arg0 ) {
        if( bp::override func_setvolume = this->get_override( "setvolume" ) )
            func_setvolume( arg0 );
        else
            this->Faunus::pot_lj::setvolume( arg0 );
    }
    
    
    void default_setvolume( double arg0 ) {
        Faunus::pot_lj::setvolume( arg0 );
    }

};

struct random_wrapper : Faunus::random, bp::wrapper< Faunus::random > {

    virtual double random_one(  ){
        bp::override func_random_one = this->get_override( "random_one" );
        return func_random_one(  );
    }

    virtual void random_seed( unsigned int arg0=0 ){
        bp::override func_random_seed = this->get_override( "random_seed" );
        func_random_seed( arg0 );
    }

};

struct randomDefault_wrapper : Faunus::randomDefault, bp::wrapper< Faunus::randomDefault > {

    randomDefault_wrapper( )
    : Faunus::randomDefault( )
      , bp::wrapper< Faunus::randomDefault >(){
        // null constructor
    
    }

    virtual double random_one(  ) {
        if( bp::override func_random_one = this->get_override( "random_one" ) )
            return func_random_one(  );
        else
            return this->Faunus::randomDefault::random_one(  );
    }
    
    
    double default_random_one(  ) {
        return Faunus::randomDefault::random_one( );
    }

    virtual void random_seed( unsigned int arg0=0 ) {
        if( bp::override func_random_seed = this->get_override( "random_seed" ) )
            func_random_seed( arg0 );
        else
            this->Faunus::randomDefault::random_seed( arg0 );
    }
    
    
    void default_random_seed( unsigned int arg0=0 ) {
        Faunus::randomDefault::random_seed( arg0 );
    }

};

struct randomTwister_wrapper : Faunus::randomTwister, bp::wrapper< Faunus::randomTwister > {

    virtual double random_one(  ) {
        if( bp::override func_random_one = this->get_override( "random_one" ) )
            return func_random_one(  );
        else
            return this->Faunus::randomTwister::random_one(  );
    }
    
    
    double default_random_one(  ) {
        return Faunus::randomTwister::random_one( );
    }

    virtual void random_seed( unsigned int arg0=0 ) {
        if( bp::override func_random_seed = this->get_override( "random_seed" ) )
            func_random_seed( arg0 );
        else
            this->Faunus::randomTwister::random_seed( arg0 );
    }
    
    
    void default_random_seed( unsigned int arg0=0 ) {
        Faunus::randomTwister::random_seed( arg0 );
    }

};

struct saltmove_wrapper : Faunus::saltmove, bp::wrapper< Faunus::saltmove > {

    saltmove_wrapper(::Faunus::ensemble & arg0, ::Faunus::container & arg1, ::Faunus::energybase & arg2 )
    : Faunus::saltmove( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2) )
      , bp::wrapper< Faunus::saltmove >(){
        // constructor
    
    }

    saltmove_wrapper(::Faunus::ensemble & arg0, ::Faunus::container & arg1, ::Faunus::energybase & arg2, ::Faunus::inputfile & arg3 )
    : Faunus::saltmove( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3) )
      , bp::wrapper< Faunus::saltmove >(){
        // constructor
    
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::saltmove::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::saltmove::info( );
    }

};

struct slit_wrapper : Faunus::slit, bp::wrapper< Faunus::slit > {

    virtual void boundary( ::Faunus::point & a ) {
        if( bp::override func_boundary = this->get_override( "boundary" ) )
            func_boundary( boost::ref(a) );
        else
            this->Faunus::slit::boundary( boost::ref(a) );
    }
    
    
    void default_boundary( ::Faunus::point & a ) {
        Faunus::slit::boundary( boost::ref(a) );
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::slit::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::slit::info( );
    }

    virtual bool collision( ::Faunus::particle const & a ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(a) );
        else
            return this->Faunus::box::collision( boost::ref(a) );
    }
    
    
    bool default_collision( ::Faunus::particle const & a ) {
        return Faunus::box::collision( boost::ref(a) );
    }

    virtual bool collision( ::Faunus::particle const & a, ::Faunus::particle const & b ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::collision( boost::ref(a), boost::ref(b) );
    }
    
    
    bool default_collision( ::Faunus::particle const & a, ::Faunus::particle const & b ) {
        return Faunus::box::collision( boost::ref(a), boost::ref(b) );
    }

    virtual double dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_dist = this->get_override( "dist" ) )
            return func_dist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::dist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::box::dist( boost::ref(a), boost::ref(b) );
    }

    virtual ::std::string povray(  ) {
        if( bp::override func_povray = this->get_override( "povray" ) )
            return func_povray(  );
        else
            return this->Faunus::box::povray(  );
    }
    
    
    ::std::string default_povray(  ) {
        return Faunus::box::povray( );
    }

    virtual void randompos( ::Faunus::point & arg0 ) {
        if( bp::override func_randompos = this->get_override( "randompos" ) )
            func_randompos( boost::ref(arg0) );
        else
            this->Faunus::box::randompos( boost::ref(arg0) );
    }
    
    
    void default_randompos( ::Faunus::point & arg0 ) {
        Faunus::box::randompos( boost::ref(arg0) );
    }

    virtual void scale( ::Faunus::point & a, double const & newlen ) const  {
        if( bp::override func_scale = this->get_override( "scale" ) )
            func_scale( boost::ref(a), newlen );
        else
            this->Faunus::box::scale( boost::ref(a), newlen );
    }
    
    
    void default_scale( ::Faunus::point & a, double const & newlen ) const  {
        Faunus::box::scale( boost::ref(a), newlen );
    }

    virtual void setvolume( double arg0 ) {
        if( bp::override func_setvolume = this->get_override( "setvolume" ) )
            func_setvolume( arg0 );
        else
            this->Faunus::box::setvolume( arg0 );
    }
    
    
    void default_setvolume( double arg0 ) {
        Faunus::box::setvolume( arg0 );
    }

    virtual double sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_sqdist = this->get_override( "sqdist" ) )
            return func_sqdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::sqdist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::box::sqdist( boost::ref(a), boost::ref(b) );
    }

    virtual ::Faunus::point vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_vdist = this->get_override( "vdist" ) )
            return func_vdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::vdist( boost::ref(a), boost::ref(b) );
    }
    
    
    ::Faunus::point default_vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::box::vdist( boost::ref(a), boost::ref(b) );
    }

};

struct systemenergy_wrapper : Faunus::systemenergy, bp::wrapper< Faunus::systemenergy > {

    systemenergy_wrapper(double arg0 )
    : Faunus::systemenergy( arg0 )
      , bp::wrapper< Faunus::systemenergy >(){
        // constructor
    
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::systemenergy::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::systemenergy::info( );
    }

};

struct widom_wrapper : Faunus::widom, bp::wrapper< Faunus::widom > {

    widom_wrapper(int n=10 )
    : Faunus::widom( n )
      , bp::wrapper< Faunus::widom >(){
        // constructor
    
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::widom::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::widom::info( );
    }

};

BOOST_PYTHON_MODULE(faunus){
    { //::std::vector< std::vector< double > >
        typedef bp::class_< std::vector< std::vector< double > > > vector_less__std_scope_vector_less__double__greater___greater__exposer_t;
        vector_less__std_scope_vector_less__double__greater___greater__exposer_t vector_less__std_scope_vector_less__double__greater___greater__exposer = vector_less__std_scope_vector_less__double__greater___greater__exposer_t( "vector_less__std_scope_vector_less__double__greater___greater_" );
        bp::scope vector_less__std_scope_vector_less__double__greater___greater__scope( vector_less__std_scope_vector_less__double__greater___greater__exposer );
        //WARNING: the next line of code will not compile, because "::std::vector<double, std::allocator<double> >" does not have operator== !
        vector_less__std_scope_vector_less__double__greater___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::vector< double > > >() );
    }

    { //::std::vector< std::string >
        typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
        vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
        bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
        vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() );
    }

    { //::std::vector< Faunus::point >
        typedef bp::class_< std::vector< Faunus::point > > vector_less__Faunus_scope_point__greater__exposer_t;
        vector_less__Faunus_scope_point__greater__exposer_t vector_less__Faunus_scope_point__greater__exposer = vector_less__Faunus_scope_point__greater__exposer_t( "vector_less__Faunus_scope_point__greater_" );
        bp::scope vector_less__Faunus_scope_point__greater__scope( vector_less__Faunus_scope_point__greater__exposer );
        vector_less__Faunus_scope_point__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< Faunus::point > >() );
    }

    { //::std::vector< Faunus::particle::type >
        typedef bp::class_< std::vector< Faunus::particle::type > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::vector_indexing_suite< ::std::vector< Faunus::particle::type >, true >() );
    }

    { //::std::vector< Faunus::particle >
        typedef bp::class_< std::vector< Faunus::particle > > vector_less__Faunus_scope_particle__greater__exposer_t;
        vector_less__Faunus_scope_particle__greater__exposer_t vector_less__Faunus_scope_particle__greater__exposer = vector_less__Faunus_scope_particle__greater__exposer_t( "vector_less__Faunus_scope_particle__greater_" );
        bp::scope vector_less__Faunus_scope_particle__greater__scope( vector_less__Faunus_scope_particle__greater__exposer );
        vector_less__Faunus_scope_particle__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< Faunus::particle > >() );
    }

    { //::std::vector< Faunus::macromolecule >
        typedef bp::class_< std::vector< Faunus::macromolecule > > vector_less__Faunus_scope_macromolecule__greater__exposer_t;
        vector_less__Faunus_scope_macromolecule__greater__exposer_t vector_less__Faunus_scope_macromolecule__greater__exposer = vector_less__Faunus_scope_macromolecule__greater__exposer_t( "vector_less__Faunus_scope_macromolecule__greater_" );
        bp::scope vector_less__Faunus_scope_macromolecule__greater__scope( vector_less__Faunus_scope_macromolecule__greater__exposer );
        vector_less__Faunus_scope_macromolecule__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< Faunus::macromolecule > >() );
    }

    { //::std::vector< Faunus::atoms::data >
        typedef bp::class_< std::vector< Faunus::atoms::data > > vector_less__Faunus_scope_atoms_scope_data__greater__exposer_t;
        vector_less__Faunus_scope_atoms_scope_data__greater__exposer_t vector_less__Faunus_scope_atoms_scope_data__greater__exposer = vector_less__Faunus_scope_atoms_scope_data__greater__exposer_t( "vector_less__Faunus_scope_atoms_scope_data__greater_" );
        bp::scope vector_less__Faunus_scope_atoms_scope_data__greater__scope( vector_less__Faunus_scope_atoms_scope_data__greater__exposer );
        vector_less__Faunus_scope_atoms_scope_data__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< Faunus::atoms::data > >() );
    }

    bp::class_< analysis_wrapper, boost::noncopyable >( "analysis", bp::init< >() )    
        .def( 
            "info"
            , bp::pure_virtual( (::std::string ( ::Faunus::analysis::* )(  ) )(&::Faunus::analysis::info) ) )    
        .def_readwrite( "runfraction", &Faunus::analysis::runfraction );

    { //::Faunus::atoms
        typedef bp::class_< Faunus::atoms, boost::noncopyable > atoms_exposer_t;
        atoms_exposer_t atoms_exposer = atoms_exposer_t( "atoms", bp::init< >() );
        bp::scope atoms_scope( atoms_exposer );
        bp::class_< Faunus::atoms::data, boost::noncopyable >( "data", bp::no_init )    
            .def( bp::self == bp::self )    
            .def_readwrite( "charge", &Faunus::atoms::data::charge )    
            .def_readwrite( "eps", &Faunus::atoms::data::eps )    
            .def_readwrite( "hydrophobic", &Faunus::atoms::data::hydrophobic )    
            .def_readwrite( "id", &Faunus::atoms::data::id )    
            .def_readwrite( "mw", &Faunus::atoms::data::mw )    
            .def_readwrite( "name", &Faunus::atoms::data::name )    
            .def_readwrite( "pka", &Faunus::atoms::data::pka )    
            .def_readwrite( "radius", &Faunus::atoms::data::radius )    
            .def_readwrite( "sigma", &Faunus::atoms::data::sigma );
        { //::Faunus::atoms::info
        
            typedef ::std::string ( ::Faunus::atoms::*info_function_type )(  ) ;
            
            atoms_exposer.def( 
                "info"
                , info_function_type( &::Faunus::atoms::info ) );
        
        }
        { //::Faunus::atoms::load
        
            typedef bool ( ::Faunus::atoms::*load_function_type )( ::std::string ) ;
            
            atoms_exposer.def( 
                "load"
                , load_function_type( &::Faunus::atoms::load )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::atoms::load
        
            typedef bool ( ::Faunus::atoms::*load_function_type )( ::Faunus::inputfile & ) ;
            
            atoms_exposer.def( 
                "load"
                , load_function_type( &::Faunus::atoms::load )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::atoms::operator()
        
            typedef ::Faunus::particle ( ::Faunus::atoms::*__call___function_type )( ::std::string ) ;
            
            atoms_exposer.def( 
                "__call__"
                , __call___function_type( &::Faunus::atoms::operator() )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::atoms::operator()
        
            typedef ::Faunus::particle ( ::Faunus::atoms::*__call___function_type )( char ) ;
            
            atoms_exposer.def( 
                "__call__"
                , __call___function_type( &::Faunus::atoms::operator() )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::atoms::operator[]
        
            typedef ::Faunus::atoms::data & ( ::Faunus::atoms::*__getitem___function_type )( ::std::string ) ;
            
            atoms_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::Faunus::atoms::operator[] )
                , ( bp::arg("arg0") )
                , bp::return_internal_reference< >() );
        
        }
        { //::Faunus::atoms::operator[]
        
            typedef ::Faunus::atoms::data & ( ::Faunus::atoms::*__getitem___function_type )( char ) ;
            
            atoms_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::Faunus::atoms::operator[] )
                , ( bp::arg("arg0") )
                , bp::return_internal_reference< >() );
        
        }
        { //::Faunus::atoms::reset_properties
        
            typedef void ( ::Faunus::atoms::*reset_properties_function_type )( ::std::vector< Faunus::particle > & ) ;
            
            atoms_exposer.def( 
                "reset_properties"
                , reset_properties_function_type( &::Faunus::atoms::reset_properties )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::atoms::set
        
            typedef ::Faunus::particle ( ::Faunus::atoms::*set_function_type )( ::Faunus::particle &,char ) ;
            
            atoms_exposer.def( 
                "set"
                , set_function_type( &::Faunus::atoms::set )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        atoms_exposer.def_readwrite( "eps", &Faunus::atoms::eps );
        atoms_exposer.def_readwrite( "list", &Faunus::atoms::list );
        atoms_exposer.def_readwrite( "sigma", &Faunus::atoms::sigma );
    }

    bp::class_< Faunus::point >( "point", bp::init< >() )    
        .def( bp::init< double, double, double >(( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") )) )    
        .def( 
            "clear"
            , (void ( ::Faunus::point::* )(  ) )( &::Faunus::point::clear ) )    
        .def( 
            "dist"
            , (double ( ::Faunus::point::* )( ::Faunus::point const & ) const)( &::Faunus::point::dist )
            , ( bp::arg("p") ) )    
        .def( 
            "dist"
            , (double ( ::Faunus::point::* )( ::Faunus::point const &,double const &,double const & ) const)( &::Faunus::point::dist )
            , ( bp::arg("p"), bp::arg("len"), bp::arg("halflen") ) )    
        .def( 
            "dot"
            , (double ( ::Faunus::point::* )( ::Faunus::point const & ) const)( &::Faunus::point::dot )
            , ( bp::arg("arg0") ) )    
        .def( 
            "len"
            , (double ( ::Faunus::point::* )(  ) const)( &::Faunus::point::len ) )    
        .def( bp::self * bp::self )    
        .def( bp::self * bp::other< double >() )    
        .def( bp::self + bp::self )    
        .def( bp::self + bp::other< double >() )    
        .def( bp::self += bp::self )    
        .def( -bp::self )    
        .def( bp::self - bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "ranunit"
            , (void ( ::Faunus::point::* )( ::Faunus::random & ) )( &::Faunus::point::ranunit )
            , ( bp::arg("arg0") ) )    
        .def( 
            "sqdist"
            , (double ( ::Faunus::point::* )( ::Faunus::point const & ) const)( &::Faunus::point::sqdist )
            , ( bp::arg("p") ) )    
        .def( 
            "sqdist"
            , (double ( ::Faunus::point::* )( ::Faunus::point const &,double const &,double const & ) const)( &::Faunus::point::sqdist )
            , ( bp::arg("p"), bp::arg("len"), bp::arg("halflen") ) )    
        .def( 
            "str"
            , (::std::string ( ::Faunus::point::* )(  ) )( &::Faunus::point::str ) )    
        .def_readwrite( "x", &Faunus::point::x )    
        .def_readwrite( "y", &Faunus::point::y )    
        .def_readwrite( "z", &Faunus::point::z );

    { //::Faunus::particle
        typedef bp::class_< Faunus::particle, bp::bases< Faunus::point >, boost::noncopyable > particle_exposer_t;
        particle_exposer_t particle_exposer = particle_exposer_t( "particle", bp::init< >() );
        bp::scope particle_scope( particle_exposer );
        bp::enum_< Faunus::particle::type>("type")
            .value("FIRST", Faunus::particle::FIRST)
            .value("GLY", Faunus::particle::GLY)
            .value("ALA", Faunus::particle::ALA)
            .value("VAL", Faunus::particle::VAL)
            .value("LEU", Faunus::particle::LEU)
            .value("ILE", Faunus::particle::ILE)
            .value("PHE", Faunus::particle::PHE)
            .value("TRP", Faunus::particle::TRP)
            .value("TYR", Faunus::particle::TYR)
            .value("HIS", Faunus::particle::HIS)
            .value("SER", Faunus::particle::SER)
            .value("THR", Faunus::particle::THR)
            .value("MET", Faunus::particle::MET)
            .value("CYS", Faunus::particle::CYS)
            .value("ASP", Faunus::particle::ASP)
            .value("GLN", Faunus::particle::GLN)
            .value("GLU", Faunus::particle::GLU)
            .value("ASN", Faunus::particle::ASN)
            .value("LYS", Faunus::particle::LYS)
            .value("ARG", Faunus::particle::ARG)
            .value("PRO", Faunus::particle::PRO)
            .value("UNK", Faunus::particle::UNK)
            .value("NTR", Faunus::particle::NTR)
            .value("CTR", Faunus::particle::CTR)
            .value("NA", Faunus::particle::NA)
            .value("K", Faunus::particle::K)
            .value("F", Faunus::particle::F)
            .value("CL", Faunus::particle::CL)
            .value("BR", Faunus::particle::BR)
            .value("I", Faunus::particle::I)
            .value("SO4", Faunus::particle::SO4)
            .value("PO4", Faunus::particle::PO4)
            .value("LA", Faunus::particle::LA)
            .value("ION", Faunus::particle::ION)
            .value("CATION", Faunus::particle::CATION)
            .value("ANION", Faunus::particle::ANION)
            .value("GHOST", Faunus::particle::GHOST)
            .value("RNH3", Faunus::particle::RNH3)
            .value("RNH4", Faunus::particle::RNH4)
            .value("RCOOH", Faunus::particle::RCOOH)
            .value("RCOO", Faunus::particle::RCOO)
            .value("HYDROPHOBIC", Faunus::particle::HYDROPHOBIC)
            .value("LAST", Faunus::particle::LAST)
            .export_values()
            ;
        { //::Faunus::particle::mw2rad
        
            typedef double ( ::Faunus::particle::*mw2rad_function_type )( double ) const;
            
            particle_exposer.def( 
                "mw2rad"
                , mw2rad_function_type( &::Faunus::particle::mw2rad )
                , ( bp::arg("arg0")=1 ) );
        
        }
        { //::Faunus::particle::mw2vol
        
            typedef double ( ::Faunus::particle::*mw2vol_function_type )( double ) const;
            
            particle_exposer.def( 
                "mw2vol"
                , mw2vol_function_type( &::Faunus::particle::mw2vol )
                , ( bp::arg("arg0")=1 ) );
        
        }
        { //::Faunus::particle::operator=
        
            typedef ::Faunus::particle & ( ::Faunus::particle::*assign_function_type )( ::Faunus::point const & ) ;
            
            particle_exposer.def( 
                "assign"
                , assign_function_type( &::Faunus::particle::operator= )
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
        { //::Faunus::particle::overlap
        
            typedef bool ( ::Faunus::particle::*overlap_function_type )( ::Faunus::particle const & ) const;
            
            particle_exposer.def( 
                "overlap"
                , overlap_function_type( &::Faunus::particle::overlap )
                , ( bp::arg("p") ) );
        
        }
        { //::Faunus::particle::overlap
        
            typedef bool ( ::Faunus::particle::*overlap_function_type )( ::Faunus::particle const &,double const & ) const;
            
            particle_exposer.def( 
                "overlap"
                , overlap_function_type( &::Faunus::particle::overlap )
                , ( bp::arg("p"), bp::arg("s") ) );
        
        }
        { //::Faunus::particle::overlap
        
            typedef bool ( ::Faunus::particle::*overlap_function_type )( ::Faunus::particle const &,double const &,double const & ) const;
            
            particle_exposer.def( 
                "overlap"
                , overlap_function_type( &::Faunus::particle::overlap )
                , ( bp::arg("p"), bp::arg("len"), bp::arg("halflen") ) );
        
        }
        { //::Faunus::particle::potential
        
            typedef double ( ::Faunus::particle::*potential_function_type )( ::Faunus::point const & ) ;
            
            particle_exposer.def( 
                "potential"
                , potential_function_type( &::Faunus::particle::potential )
                , ( bp::arg("p") ) );
        
        }
        { //::Faunus::particle::volume
        
            typedef double ( ::Faunus::particle::*volume_function_type )(  ) const;
            
            particle_exposer.def( 
                "volume"
                , volume_function_type( &::Faunus::particle::volume ) );
        
        }
        particle_exposer.def_readwrite( "charge", &Faunus::particle::charge );
        particle_exposer.def_readwrite( "hydrophobic", &Faunus::particle::hydrophobic );
        particle_exposer.def_readwrite( "id", &Faunus::particle::id );
        particle_exposer.def_readwrite( "mw", &Faunus::particle::mw );
        particle_exposer.def_readwrite( "radius", &Faunus::particle::radius );
    }

    bp::class_< Faunus::particles, boost::noncopyable >( "particles", bp::no_init )    
        .def( 
            "charge"
            , (double ( ::Faunus::particles::* )(  ) )( &::Faunus::particles::charge ) )    
        .def( 
            "charge"
            , (double ( ::Faunus::particles::* )( ::Faunus::point const &,double ) )( &::Faunus::particles::charge )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "check_vector"
            , (bool ( ::Faunus::particles::* )(  ) )( &::Faunus::particles::check_vector ) )    
        .def( 
            "count"
            , (int ( ::Faunus::particles::* )( ::Faunus::particle::type,::Faunus::point const &,double ) )( &::Faunus::particles::count )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "insert"
            , (bool ( ::Faunus::particles::* )( ::Faunus::particle,unsigned int ) )( &::Faunus::particles::insert )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "list_of_species"
            , (::std::vector< Faunus::particle::type > ( ::Faunus::particles::* )(  ) const)( &::Faunus::particles::list_of_species ) )    
        .def( 
            "overlap"
            , (bool ( ::Faunus::particles::* )( ::Faunus::particle const & ) )( &::Faunus::particles::overlap )
            , ( bp::arg("arg0") ) )    
        .def( 
            "overlap"
            , (bool ( ::Faunus::particles::* )( ::std::vector< Faunus::particle > const & ) )( &::Faunus::particles::overlap )
            , ( bp::arg("arg0") ) )    
        .def( 
            "push_back"
            , (int ( ::Faunus::particles::* )( ::Faunus::particle const & ) )( &::Faunus::particles::push_back )
            , ( bp::arg("arg0") ) )    
        .def( 
            "remove"
            , (bool ( ::Faunus::particles::* )( unsigned int ) )( &::Faunus::particles::remove )
            , ( bp::arg("arg0") ) )    
        .def_readwrite( "p", &Faunus::particles::p )    
        .def_readwrite( "trial", &Faunus::particles::trial );

    bp::class_< container_wrapper, bp::bases< Faunus::particles >, boost::noncopyable >( "container", bp::no_init )    
        .def( 
            "boundary"
            , (void ( ::Faunus::container::* )( ::Faunus::point & ) )(&::Faunus::container::boundary)
            , (void ( container_wrapper::* )( ::Faunus::point & ) )(&container_wrapper::default_boundary)
            , ( bp::arg("arg0") ) )    
        .def( 
            "collision"
            , bp::pure_virtual( (bool ( ::Faunus::container::* )( ::Faunus::particle const & ) )(&::Faunus::container::collision) )
            , ( bp::arg("arg0") ) )    
        .def( 
            "collision"
            , (bool ( ::Faunus::container::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&::Faunus::container::collision)
            , (bool ( container_wrapper::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&container_wrapper::default_collision)
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "dist"
            , (double ( ::Faunus::container::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::container::dist)
            , (double ( container_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&container_wrapper::default_dist)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "getvolume"
            , (double ( ::Faunus::container::* )(  ) )( &::Faunus::container::getvolume ) )    
        .def( 
            "info"
            , (::std::string ( ::Faunus::container::* )(  ) )(&::Faunus::container::info)
            , (::std::string ( container_wrapper::* )(  ) )(&container_wrapper::default_info) )    
        .def( 
            "povray"
            , (::std::string ( ::Faunus::container::* )(  ) )(&::Faunus::container::povray)
            , (::std::string ( container_wrapper::* )(  ) )(&container_wrapper::default_povray) )    
        .def( 
            "randompos"
            , bp::pure_virtual( (void ( ::Faunus::container::* )( ::Faunus::point & ) )(&::Faunus::container::randompos) )
            , ( bp::arg("arg0") ) )    
        .def( 
            "scale"
            , (void ( ::Faunus::container::* )( ::Faunus::point &,double const & ) const)(&::Faunus::container::scale)
            , (void ( container_wrapper::* )( ::Faunus::point &,double const & ) const)(&container_wrapper::default_scale)
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "setvolume"
            , (void ( ::Faunus::container::* )( double ) )(&::Faunus::container::setvolume)
            , (void ( container_wrapper::* )( double ) )(&container_wrapper::default_setvolume)
            , ( bp::arg("arg0") ) )    
        .def( 
            "sqdist"
            , (double ( ::Faunus::container::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::container::sqdist)
            , (double ( container_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&container_wrapper::default_sqdist)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "vdist"
            , (::Faunus::point ( ::Faunus::container::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::container::vdist)
            , (::Faunus::point ( container_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&container_wrapper::default_vdist)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def_readonly( "atom", &Faunus::container::atom );

    { //::Faunus::box
        typedef bp::class_< box_wrapper, bp::bases< Faunus::container >, boost::noncopyable > box_exposer_t;
        box_exposer_t box_exposer = box_exposer_t( "box", bp::init< double >(( bp::arg("arg0") )) );
        bp::scope box_scope( box_exposer );
        bp::implicitly_convertible< double, Faunus::box >();
        box_exposer.def( bp::init< Faunus::inputfile & >(( bp::arg("arg0") )) );
        bp::implicitly_convertible< Faunus::inputfile &, Faunus::box >();
        { //::Faunus::box::anint
        
            typedef int ( ::Faunus::box::*anint_function_type )( double ) ;
            
            box_exposer.def( 
                "anint"
                , anint_function_type( &::Faunus::box::anint )
                , ( bp::arg("x") ) );
        
        }
        { //::Faunus::box::boundary
        
            typedef void ( ::Faunus::box::*boundary_function_type )( ::Faunus::point & ) ;
            typedef void ( box_wrapper::*default_boundary_function_type )( ::Faunus::point & ) ;
            
            box_exposer.def( 
                "boundary"
                , boundary_function_type(&::Faunus::box::boundary)
                , default_boundary_function_type(&box_wrapper::default_boundary)
                , ( bp::arg("a") ) );
        
        }
        { //::Faunus::box::collision
        
            typedef bool ( ::Faunus::box::*collision_function_type )( ::Faunus::particle const & ) ;
            typedef bool ( box_wrapper::*default_collision_function_type )( ::Faunus::particle const & ) ;
            
            box_exposer.def( 
                "collision"
                , collision_function_type(&::Faunus::box::collision)
                , default_collision_function_type(&box_wrapper::default_collision)
                , ( bp::arg("a") ) );
        
        }
        { //::Faunus::box::collision
        
            typedef bool ( ::Faunus::box::*collision_function_type )( ::Faunus::particle const &,::Faunus::particle const & ) ;
            typedef bool ( box_wrapper::*default_collision_function_type )( ::Faunus::particle const &,::Faunus::particle const & ) ;
            
            box_exposer.def( 
                "collision"
                , collision_function_type(&::Faunus::box::collision)
                , default_collision_function_type(&box_wrapper::default_collision)
                , ( bp::arg("a"), bp::arg("b") ) );
        
        }
        { //::Faunus::box::dist
        
            typedef double ( ::Faunus::box::*dist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            typedef double ( box_wrapper::*default_dist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            
            box_exposer.def( 
                "dist"
                , dist_function_type(&::Faunus::box::dist)
                , default_dist_function_type(&box_wrapper::default_dist)
                , ( bp::arg("a"), bp::arg("b") ) );
        
        }
        { //::Faunus::box::info
        
            typedef ::std::string ( ::Faunus::box::*info_function_type )(  ) ;
            typedef ::std::string ( box_wrapper::*default_info_function_type )(  ) ;
            
            box_exposer.def( 
                "info"
                , info_function_type(&::Faunus::box::info)
                , default_info_function_type(&box_wrapper::default_info) );
        
        }
        { //::Faunus::box::povray
        
            typedef ::std::string ( ::Faunus::box::*povray_function_type )(  ) ;
            typedef ::std::string ( box_wrapper::*default_povray_function_type )(  ) ;
            
            box_exposer.def( 
                "povray"
                , povray_function_type(&::Faunus::box::povray)
                , default_povray_function_type(&box_wrapper::default_povray) );
        
        }
        { //::Faunus::box::randompos
        
            typedef void ( ::Faunus::box::*randompos_function_type )( ::Faunus::point & ) ;
            typedef void ( box_wrapper::*default_randompos_function_type )( ::Faunus::point & ) ;
            
            box_exposer.def( 
                "randompos"
                , randompos_function_type(&::Faunus::box::randompos)
                , default_randompos_function_type(&box_wrapper::default_randompos)
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::box::randompos
        
            typedef ::Faunus::point ( ::Faunus::box::*randompos_function_type )(  ) ;
            
            box_exposer.def( 
                "randompos"
                , randompos_function_type( &::Faunus::box::randompos ) );
        
        }
        { //::Faunus::box::scale
        
            typedef void ( ::Faunus::box::*scale_function_type )( ::Faunus::point &,double const & ) const;
            typedef void ( box_wrapper::*default_scale_function_type )( ::Faunus::point &,double const & ) const;
            
            box_exposer.def( 
                "scale"
                , scale_function_type(&::Faunus::box::scale)
                , default_scale_function_type(&box_wrapper::default_scale)
                , ( bp::arg("a"), bp::arg("newlen") ) );
        
        }
        { //::Faunus::box::setvolume
        
            typedef void ( ::Faunus::box::*setvolume_function_type )( double ) ;
            typedef void ( box_wrapper::*default_setvolume_function_type )( double ) ;
            
            box_exposer.def( 
                "setvolume"
                , setvolume_function_type(&::Faunus::box::setvolume)
                , default_setvolume_function_type(&box_wrapper::default_setvolume)
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::box::sqdist
        
            typedef double ( ::Faunus::box::*sqdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            typedef double ( box_wrapper::*default_sqdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            
            box_exposer.def( 
                "sqdist"
                , sqdist_function_type(&::Faunus::box::sqdist)
                , default_sqdist_function_type(&box_wrapper::default_sqdist)
                , ( bp::arg("a"), bp::arg("b") ) );
        
        }
        { //::Faunus::box::vdist
        
            typedef ::Faunus::point ( ::Faunus::box::*vdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            typedef ::Faunus::point ( box_wrapper::*default_vdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            
            box_exposer.def( 
                "vdist"
                , vdist_function_type(&::Faunus::box::vdist)
                , default_vdist_function_type(&box_wrapper::default_vdist)
                , ( bp::arg("a"), bp::arg("b") ) );
        
        }
        box_exposer.def_readwrite( "len", &Faunus::box::len );
        box_exposer.def_readwrite( "len_half", &Faunus::box::len_half );
        box_exposer.def_readwrite( "len_inv", &Faunus::box::len_inv );
        box_exposer.def_readwrite( "tlen_inv", &Faunus::box::tlen_inv );
    }

    bp::class_< Faunus::ensemble, boost::noncopyable >( "ensemble", bp::no_init )    
        .def( 
            "metropolis"
            , (bool ( ::Faunus::ensemble::* )( double ) )( &::Faunus::ensemble::metropolis )
            , ( bp::arg("du") ) );

    bp::class_< Faunus::canonical, bp::bases< Faunus::ensemble >, boost::noncopyable >( "canonical", bp::no_init );

    { //::Faunus::cell
        typedef bp::class_< cell_wrapper, bp::bases< Faunus::container >, boost::noncopyable > cell_exposer_t;
        cell_exposer_t cell_exposer = cell_exposer_t( "cell", bp::init< double >(( bp::arg("arg0") )) );
        bp::scope cell_scope( cell_exposer );
        bp::implicitly_convertible< double, Faunus::cell >();
        cell_exposer.def( bp::init< Faunus::inputfile & >(( bp::arg("arg0") )) );
        bp::implicitly_convertible< Faunus::inputfile &, Faunus::cell >();
        { //::Faunus::cell::collision
        
            typedef bool ( ::Faunus::cell::*collision_function_type )( ::Faunus::particle const & ) ;
            typedef bool ( cell_wrapper::*default_collision_function_type )( ::Faunus::particle const & ) ;
            
            cell_exposer.def( 
                "collision"
                , collision_function_type(&::Faunus::cell::collision)
                , default_collision_function_type(&cell_wrapper::default_collision)
                , ( bp::arg("a") ) );
        
        }
        { //::Faunus::cell::info
        
            typedef ::std::string ( ::Faunus::cell::*info_function_type )(  ) ;
            typedef ::std::string ( cell_wrapper::*default_info_function_type )(  ) ;
            
            cell_exposer.def( 
                "info"
                , info_function_type(&::Faunus::cell::info)
                , default_info_function_type(&cell_wrapper::default_info) );
        
        }
        { //::Faunus::cell::povray
        
            typedef ::std::string ( ::Faunus::cell::*povray_function_type )(  ) ;
            typedef ::std::string ( cell_wrapper::*default_povray_function_type )(  ) ;
            
            cell_exposer.def( 
                "povray"
                , povray_function_type(&::Faunus::cell::povray)
                , default_povray_function_type(&cell_wrapper::default_povray) );
        
        }
        { //::Faunus::cell::randompos
        
            typedef void ( ::Faunus::cell::*randompos_function_type )( ::Faunus::point & ) ;
            typedef void ( cell_wrapper::*default_randompos_function_type )( ::Faunus::point & ) ;
            
            cell_exposer.def( 
                "randompos"
                , randompos_function_type(&::Faunus::cell::randompos)
                , default_randompos_function_type(&cell_wrapper::default_randompos)
                , ( bp::arg("arg0") ) );
        
        }
        cell_exposer.def_readwrite( "r", &Faunus::cell::r );
        { //::Faunus::container::boundary
        
            typedef void ( ::Faunus::container::*boundary_function_type )( ::Faunus::point & ) ;
            typedef void ( cell_wrapper::*default_boundary_function_type )( ::Faunus::point & ) ;
            
            cell_exposer.def( 
                "boundary"
                , boundary_function_type(&::Faunus::container::boundary)
                , default_boundary_function_type(&cell_wrapper::default_boundary)
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::container::collision
        
            typedef bool ( ::Faunus::container::*collision_function_type )( ::Faunus::particle const &,::Faunus::particle const & ) ;
            typedef bool ( cell_wrapper::*default_collision_function_type )( ::Faunus::particle const &,::Faunus::particle const & ) ;
            
            cell_exposer.def( 
                "collision"
                , collision_function_type(&::Faunus::container::collision)
                , default_collision_function_type(&cell_wrapper::default_collision)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::container::dist
        
            typedef double ( ::Faunus::container::*dist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            typedef double ( cell_wrapper::*default_dist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            
            cell_exposer.def( 
                "dist"
                , dist_function_type(&::Faunus::container::dist)
                , default_dist_function_type(&cell_wrapper::default_dist)
                , ( bp::arg("a"), bp::arg("b") ) );
        
        }
        { //::Faunus::container::scale
        
            typedef void ( ::Faunus::container::*scale_function_type )( ::Faunus::point &,double const & ) const;
            typedef void ( cell_wrapper::*default_scale_function_type )( ::Faunus::point &,double const & ) const;
            
            cell_exposer.def( 
                "scale"
                , scale_function_type(&::Faunus::container::scale)
                , default_scale_function_type(&cell_wrapper::default_scale)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::container::setvolume
        
            typedef void ( ::Faunus::container::*setvolume_function_type )( double ) ;
            typedef void ( cell_wrapper::*default_setvolume_function_type )( double ) ;
            
            cell_exposer.def( 
                "setvolume"
                , setvolume_function_type(&::Faunus::container::setvolume)
                , default_setvolume_function_type(&cell_wrapper::default_setvolume)
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::container::sqdist
        
            typedef double ( ::Faunus::container::*sqdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            typedef double ( cell_wrapper::*default_sqdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            
            cell_exposer.def( 
                "sqdist"
                , sqdist_function_type(&::Faunus::container::sqdist)
                , default_sqdist_function_type(&cell_wrapper::default_sqdist)
                , ( bp::arg("a"), bp::arg("b") ) );
        
        }
        { //::Faunus::container::vdist
        
            typedef ::Faunus::point ( ::Faunus::container::*vdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            typedef ::Faunus::point ( cell_wrapper::*default_vdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            
            cell_exposer.def( 
                "vdist"
                , vdist_function_type(&::Faunus::container::vdist)
                , default_vdist_function_type(&cell_wrapper::default_vdist)
                , ( bp::arg("a"), bp::arg("b") ) );
        
        }
    }

    bp::class_< clutch_wrapper, bp::bases< Faunus::container >, boost::noncopyable >( "clutch", bp::init< double, double, double >(( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") )) )    
        .def( 
            "collision"
            , (bool ( ::Faunus::clutch::* )( ::Faunus::particle const & ) )(&::Faunus::clutch::collision)
            , (bool ( clutch_wrapper::* )( ::Faunus::particle const & ) )(&clutch_wrapper::default_collision)
            , ( bp::arg("a") ) )    
        .def( 
            "randompos"
            , (void ( ::Faunus::clutch::* )( ::Faunus::point & ) )(&::Faunus::clutch::randompos)
            , (void ( clutch_wrapper::* )( ::Faunus::point & ) )(&clutch_wrapper::default_randompos)
            , ( bp::arg("arg0") ) )    
        .def_readwrite( "r", &Faunus::clutch::r )    
        .def_readwrite( "zmax", &Faunus::clutch::zmax )    
        .def_readwrite( "zmin", &Faunus::clutch::zmin )    
        .def( 
            "boundary"
            , (void ( ::Faunus::container::* )( ::Faunus::point & ) )(&::Faunus::container::boundary)
            , (void ( clutch_wrapper::* )( ::Faunus::point & ) )(&clutch_wrapper::default_boundary)
            , ( bp::arg("arg0") ) )    
        .def( 
            "collision"
            , (bool ( ::Faunus::container::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&::Faunus::container::collision)
            , (bool ( clutch_wrapper::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&clutch_wrapper::default_collision)
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "dist"
            , (double ( ::Faunus::container::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::container::dist)
            , (double ( clutch_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&clutch_wrapper::default_dist)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "info"
            , (::std::string ( ::Faunus::container::* )(  ) )(&::Faunus::container::info)
            , (::std::string ( clutch_wrapper::* )(  ) )(&clutch_wrapper::default_info) )    
        .def( 
            "povray"
            , (::std::string ( ::Faunus::container::* )(  ) )(&::Faunus::container::povray)
            , (::std::string ( clutch_wrapper::* )(  ) )(&clutch_wrapper::default_povray) )    
        .def( 
            "scale"
            , (void ( ::Faunus::container::* )( ::Faunus::point &,double const & ) const)(&::Faunus::container::scale)
            , (void ( clutch_wrapper::* )( ::Faunus::point &,double const & ) const)(&clutch_wrapper::default_scale)
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "setvolume"
            , (void ( ::Faunus::container::* )( double ) )(&::Faunus::container::setvolume)
            , (void ( clutch_wrapper::* )( double ) )(&clutch_wrapper::default_setvolume)
            , ( bp::arg("arg0") ) )    
        .def( 
            "sqdist"
            , (double ( ::Faunus::container::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::container::sqdist)
            , (double ( clutch_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&clutch_wrapper::default_sqdist)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "vdist"
            , (::Faunus::point ( ::Faunus::container::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::container::vdist)
            , (::Faunus::point ( clutch_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&clutch_wrapper::default_vdist)
            , ( bp::arg("a"), bp::arg("b") ) );

    bp::class_< cylinder_wrapper, bp::bases< Faunus::container >, boost::noncopyable >( "cylinder", bp::init< double, double >(( bp::arg("arg0"), bp::arg("arg1") )) )    
        .def( 
            "collision"
            , (bool ( ::Faunus::cylinder::* )( ::Faunus::particle const & ) )(&::Faunus::cylinder::collision)
            , (bool ( cylinder_wrapper::* )( ::Faunus::particle const & ) )(&cylinder_wrapper::default_collision)
            , ( bp::arg("a") ) )    
        .def( 
            "info"
            , (::std::string ( ::Faunus::cylinder::* )(  ) )(&::Faunus::cylinder::info)
            , (::std::string ( cylinder_wrapper::* )(  ) )(&cylinder_wrapper::default_info) )    
        .def( 
            "povray"
            , (::std::string ( ::Faunus::cylinder::* )(  ) )(&::Faunus::cylinder::povray)
            , (::std::string ( cylinder_wrapper::* )(  ) )(&cylinder_wrapper::default_povray) )    
        .def( 
            "randompos"
            , (void ( ::Faunus::cylinder::* )( ::Faunus::point & ) )(&::Faunus::cylinder::randompos)
            , (void ( cylinder_wrapper::* )( ::Faunus::point & ) )(&cylinder_wrapper::default_randompos)
            , ( bp::arg("arg0") ) )    
        .def_readwrite( "diameter", &Faunus::cylinder::diameter )    
        .def_readwrite( "len", &Faunus::cylinder::len )    
        .def_readwrite( "r", &Faunus::cylinder::r )    
        .def_readwrite( "r2", &Faunus::cylinder::r2 )    
        .def( 
            "boundary"
            , (void ( ::Faunus::container::* )( ::Faunus::point & ) )(&::Faunus::container::boundary)
            , (void ( cylinder_wrapper::* )( ::Faunus::point & ) )(&cylinder_wrapper::default_boundary)
            , ( bp::arg("arg0") ) )    
        .def( 
            "collision"
            , (bool ( ::Faunus::container::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&::Faunus::container::collision)
            , (bool ( cylinder_wrapper::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&cylinder_wrapper::default_collision)
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "dist"
            , (double ( ::Faunus::container::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::container::dist)
            , (double ( cylinder_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&cylinder_wrapper::default_dist)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "scale"
            , (void ( ::Faunus::container::* )( ::Faunus::point &,double const & ) const)(&::Faunus::container::scale)
            , (void ( cylinder_wrapper::* )( ::Faunus::point &,double const & ) const)(&cylinder_wrapper::default_scale)
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "setvolume"
            , (void ( ::Faunus::container::* )( double ) )(&::Faunus::container::setvolume)
            , (void ( cylinder_wrapper::* )( double ) )(&cylinder_wrapper::default_setvolume)
            , ( bp::arg("arg0") ) )    
        .def( 
            "sqdist"
            , (double ( ::Faunus::container::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::container::sqdist)
            , (double ( cylinder_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&cylinder_wrapper::default_sqdist)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "vdist"
            , (::Faunus::point ( ::Faunus::container::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::container::vdist)
            , (::Faunus::point ( cylinder_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&cylinder_wrapper::default_vdist)
            , ( bp::arg("a"), bp::arg("b") ) );

    bp::class_< energybase_wrapper, boost::noncopyable >( "energybase", bp::init< double >(( bp::arg("f") )) )    
        .def( 
            "dipdip"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::Faunus::point const &,::Faunus::point const &,double ) )(&::Faunus::energybase::dipdip) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::particle const & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,int ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::group const & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,::Faunus::group const & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,int ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "energy"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,::Faunus::particle const & ) )(&::Faunus::energybase::energy) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "force"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::Faunus::container &,::Faunus::particle,::Faunus::particle,double,double ) )(&::Faunus::energybase::force) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4")=5.0e-1 ) )    
        .def( 
            "forceall"
            , bp::pure_virtual( (void ( ::Faunus::energybase::* )( ::Faunus::container &,::std::vector< Faunus::point > & ) )(&::Faunus::energybase::forceall) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "info"
            , (::std::string ( ::Faunus::energybase::* )(  ) )( &::Faunus::energybase::info ) )    
        .def( 
            "internal"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,int ) )(&::Faunus::energybase::internal) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2")=(int)(1) ) )    
        .def( 
            "iondip"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::Faunus::point const &,double,double ) )(&::Faunus::energybase::iondip) )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "pot"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::point const & ) )(&::Faunus::energybase::pot) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "potential"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,short unsigned int ) )(&::Faunus::energybase::potential) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "potential"
            , bp::pure_virtual( (double ( ::Faunus::energybase::* )( ::std::vector< Faunus::particle > const &,::Faunus::point ) )(&::Faunus::energybase::potential) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def_readwrite( "tokT", &Faunus::energybase::tokT );

    { //::Faunus::group
        typedef bp::class_< group_wrapper, boost::noncopyable > group_exposer_t;
        group_exposer_t group_exposer = group_exposer_t( "group", bp::init< bp::optional< int > >(( bp::arg("arg0")=(int)(0) )) );
        bp::scope group_scope( group_exposer );
        bp::implicitly_convertible< int, Faunus::group >();
        { //::Faunus::group::accept
        
            typedef void ( ::Faunus::group::*accept_function_type )( ::Faunus::particles & ) ;
            
            group_exposer.def( 
                "accept"
                , accept_function_type( &::Faunus::group::accept )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::group::add
        
            typedef void ( ::Faunus::group::*add_function_type )( ::Faunus::container &,::std::vector< Faunus::particle >,bool ) ;
            
            group_exposer.def( 
                "add"
                , add_function_type( &::Faunus::group::add )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2")=(bool)(false) ) );
        
        }
        { //::Faunus::group::add
        
            typedef void ( ::Faunus::group::*add_function_type )( ::Faunus::container &,::Faunus::particle::type,short int ) ;
            
            group_exposer.def( 
                "add"
                , add_function_type( &::Faunus::group::add )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::Faunus::group::charge
        
            typedef double ( ::Faunus::group::*charge_function_type )( ::std::vector< Faunus::particle > const & ) ;
            typedef double ( group_wrapper::*default_charge_function_type )( ::std::vector< Faunus::particle > const & ) ;
            
            group_exposer.def( 
                "charge"
                , charge_function_type(&::Faunus::group::charge)
                , default_charge_function_type(&group_wrapper::default_charge)
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::group::count
        
            typedef short int ( ::Faunus::group::*count_function_type )( ::std::vector< Faunus::particle > &,::Faunus::particle::type ) ;
            
            group_exposer.def( 
                "count"
                , count_function_type( &::Faunus::group::count )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::group::displace
        
            typedef short unsigned int ( ::Faunus::group::*displace_function_type )( ::Faunus::container &,double ) ;
            typedef short unsigned int ( group_wrapper::*default_displace_function_type )( ::Faunus::container &,double ) ;
            
            group_exposer.def( 
                "displace"
                , displace_function_type(&::Faunus::group::displace)
                , default_displace_function_type(&group_wrapper::default_displace)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::group::find
        
            typedef bool ( ::Faunus::group::*find_function_type )( unsigned int ) const;
            
            group_exposer.def( 
                "find"
                , find_function_type( &::Faunus::group::find )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::group::info
        
            typedef ::std::string ( ::Faunus::group::*info_function_type )(  ) ;
            typedef ::std::string ( group_wrapper::*default_info_function_type )(  ) ;
            
            group_exposer.def( 
                "info"
                , info_function_type(&::Faunus::group::info)
                , default_info_function_type(&group_wrapper::default_info) );
        
        }
        { //::Faunus::group::isobaricmove
        
            typedef void ( ::Faunus::group::*isobaricmove_function_type )( ::Faunus::container &,double ) ;
            typedef void ( group_wrapper::*default_isobaricmove_function_type )( ::Faunus::container &,double ) ;
            
            group_exposer.def( 
                "isobaricmove"
                , isobaricmove_function_type(&::Faunus::group::isobaricmove)
                , default_isobaricmove_function_type(&group_wrapper::default_isobaricmove)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::group::masscenter
        
            typedef ::Faunus::point ( ::Faunus::group::*masscenter_function_type )( ::std::vector< Faunus::particle > const & ) ;
            
            group_exposer.def( 
                "masscenter"
                , masscenter_function_type( &::Faunus::group::masscenter )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::group::masscenter
        
            typedef ::Faunus::point ( ::Faunus::group::*masscenter_function_type )( ::Faunus::container & ) ;
            
            group_exposer.def( 
                "masscenter"
                , masscenter_function_type( &::Faunus::group::masscenter )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::group::move
        
            typedef void ( ::Faunus::group::*move_function_type )( ::Faunus::container &,::Faunus::point ) ;
            
            group_exposer.def( 
                "move"
                , move_function_type( &::Faunus::group::move )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::group::numhydrophobic
        
            typedef short unsigned int ( ::Faunus::group::*numhydrophobic_function_type )( ::std::vector< Faunus::particle > & ) ;
            
            group_exposer.def( 
                "numhydrophobic"
                , numhydrophobic_function_type( &::Faunus::group::numhydrophobic )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::group::nummolecules
        
            typedef short unsigned int ( ::Faunus::group::*nummolecules_function_type )(  ) ;
            typedef short unsigned int ( group_wrapper::*default_nummolecules_function_type )(  ) ;
            
            group_exposer.def( 
                "nummolecules"
                , nummolecules_function_type(&::Faunus::group::nummolecules)
                , default_nummolecules_function_type(&group_wrapper::default_nummolecules) );
        
        }
        group_exposer.def( bp::self + bp::self );
        group_exposer.def( bp::self += bp::self );
        group_exposer.def( bp::self == bp::self );
        { //::Faunus::group::overlap
        
            typedef bool ( ::Faunus::group::*overlap_function_type )( ::Faunus::container & ) ;
            
            group_exposer.def( 
                "overlap"
                , overlap_function_type( &::Faunus::group::overlap )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::group::random
        
            typedef short int ( ::Faunus::group::*random_function_type )(  ) ;
            typedef short int ( group_wrapper::*default_random_function_type )(  ) ;
            
            group_exposer.def( 
                "random"
                , random_function_type(&::Faunus::group::random)
                , default_random_function_type(&group_wrapper::default_random) );
        
        }
        { //::Faunus::group::set
        
            typedef void ( ::Faunus::group::*set_function_type )( short int,short int ) ;
            
            group_exposer.def( 
                "set"
                , set_function_type( &::Faunus::group::set )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::group::size
        
            typedef short int ( ::Faunus::group::*size_function_type )(  ) const;
            
            group_exposer.def( 
                "size"
                , size_function_type( &::Faunus::group::size ) );
        
        }
        { //::Faunus::group::swap
        
            typedef bool ( ::Faunus::group::*swap_function_type )( ::Faunus::container &,::Faunus::group & ) ;
            
            group_exposer.def( 
                "swap"
                , swap_function_type( &::Faunus::group::swap )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::group::undo
        
            typedef void ( ::Faunus::group::*undo_function_type )( ::Faunus::particles & ) ;
            
            group_exposer.def( 
                "undo"
                , undo_function_type( &::Faunus::group::undo )
                , ( bp::arg("arg0") ) );
        
        }
        group_exposer.def_readwrite( "beg", &Faunus::group::beg );
        group_exposer.def_readwrite( "cm", &Faunus::group::cm );
        group_exposer.def_readwrite( "cm_trial", &Faunus::group::cm_trial );
        group_exposer.def_readwrite( "end", &Faunus::group::end );
        group_exposer.def_readwrite( "name", &Faunus::group::name );
    }

    { //::Faunus::inputfile
        typedef bp::class_< Faunus::inputfile, boost::noncopyable > inputfile_exposer_t;
        inputfile_exposer_t inputfile_exposer = inputfile_exposer_t( "inputfile", bp::init< std::string >(( bp::arg("arg0") )) );
        bp::scope inputfile_scope( inputfile_exposer );
        bp::implicitly_convertible< std::string, Faunus::inputfile >();
        { //::Faunus::inputfile::add
        
            typedef void ( ::Faunus::inputfile::*add_function_type )( ::std::string,::std::string ) ;
            
            inputfile_exposer.def( 
                "add"
                , add_function_type( &::Faunus::inputfile::add )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::inputfile::add
        
            typedef void ( ::Faunus::inputfile::*add_function_type )( ::std::string,double ) ;
            
            inputfile_exposer.def( 
                "add"
                , add_function_type( &::Faunus::inputfile::add )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::inputfile::getboo
        
            typedef bool ( ::Faunus::inputfile::*getboo_function_type )( ::std::string,bool ) ;
            
            inputfile_exposer.def( 
                "getboo"
                , getboo_function_type( &::Faunus::inputfile::getboo )
                , ( bp::arg("arg0"), bp::arg("arg1")=(bool)(false) ) );
        
        }
        { //::Faunus::inputfile::getflt
        
            typedef double ( ::Faunus::inputfile::*getflt_function_type )( ::std::string,double ) ;
            
            inputfile_exposer.def( 
                "getflt"
                , getflt_function_type( &::Faunus::inputfile::getflt )
                , ( bp::arg("arg0"), bp::arg("arg1")=0 ) );
        
        }
        { //::Faunus::inputfile::getint
        
            typedef int ( ::Faunus::inputfile::*getint_function_type )( ::std::string,int ) ;
            
            inputfile_exposer.def( 
                "getint"
                , getint_function_type( &::Faunus::inputfile::getint )
                , ( bp::arg("arg0"), bp::arg("arg1")=(int)(0) ) );
        
        }
        { //::Faunus::inputfile::getstr
        
            typedef ::std::string ( ::Faunus::inputfile::*getstr_function_type )( ::std::string,::std::string ) ;
            
            inputfile_exposer.def( 
                "getstr"
                , getstr_function_type( &::Faunus::inputfile::getstr )
                , ( bp::arg("arg0"), bp::arg("arg1")="" ) );
        
        }
        { //::Faunus::inputfile::getvec
        
            typedef ::std::vector< std::string > ( ::Faunus::inputfile::*getvec_function_type )( ::std::string,::std::string ) ;
            
            inputfile_exposer.def( 
                "getvec"
                , getvec_function_type( &::Faunus::inputfile::getvec )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::inputfile::info
        
            typedef ::std::string ( ::Faunus::inputfile::*info_function_type )(  ) ;
            
            inputfile_exposer.def( 
                "info"
                , info_function_type( &::Faunus::inputfile::info ) );
        
        }
    }

    { //::Faunus::interaction< Faunus::pot_coulomb >
        typedef bp::class_< interaction_less__Faunus_scope_pot_coulomb__greater__wrapper, bp::bases< Faunus::energybase >, boost::noncopyable > interaction_coulomb_exposer_t;
        interaction_coulomb_exposer_t interaction_coulomb_exposer = interaction_coulomb_exposer_t( "interaction_coulomb", bp::init< Faunus::inputfile & >(( bp::arg("in") )) );
        bp::scope interaction_coulomb_scope( interaction_coulomb_exposer );
        bp::implicitly_convertible< Faunus::inputfile &, Faunus::interaction< Faunus::pot_coulomb > >();
        { //::Faunus::interaction< Faunus::pot_coulomb >::dipdip
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*dipdip_function_type )( ::Faunus::point const &,::Faunus::point const &,double ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_dipdip_function_type )( ::Faunus::point const &,::Faunus::point const &,double ) ;
            
            interaction_coulomb_exposer.def( 
                "dipdip"
                , dipdip_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::dipdip)
                , default_dipdip_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_dipdip)
                , ( bp::arg("a"), bp::arg("b"), bp::arg("r") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::Faunus::particle const &,::Faunus::particle const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::Faunus::particle const &,::Faunus::particle const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("a"), bp::arg("b") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,int ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,int ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("j") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("g") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,int ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,int ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("g"), bp::arg("j") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,::Faunus::particle const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,::Faunus::particle const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("g"), bp::arg("a") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::std::vector< Faunus::macromolecule > const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type( &::Faunus::interaction< Faunus::pot_coulomb >::energy )
                , ( bp::arg("p"), bp::arg("g") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,::Faunus::group const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,::Faunus::group const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("g1"), bp::arg("g2") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::particle const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::particle const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("a") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::force
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*force_function_type )( ::Faunus::container &,::Faunus::particle,::Faunus::particle,double,double ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_force_function_type )( ::Faunus::container &,::Faunus::particle,::Faunus::particle,double,double ) ;
            
            interaction_coulomb_exposer.def( 
                "force"
                , force_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::force)
                , default_force_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_force)
                , ( bp::arg("c"), bp::arg("a"), bp::arg("b"), bp::arg("r"), bp::arg("dr") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::forceall
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef void ( exported_class_t::*forceall_function_type )( ::Faunus::container &,::std::vector< Faunus::point > & ) ;
            typedef void ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_forceall_function_type )( ::Faunus::container &,::std::vector< Faunus::point > & ) ;
            
            interaction_coulomb_exposer.def( 
                "forceall"
                , forceall_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::forceall)
                , default_forceall_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_forceall)
                , ( bp::arg("c"), bp::arg("f") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::info
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef ::std::string ( exported_class_t::*info_function_type )(  ) ;
            
            interaction_coulomb_exposer.def( 
                "info"
                , info_function_type( &::Faunus::interaction< Faunus::pot_coulomb >::info ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::internal
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*internal_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,int ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_internal_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,int ) ;
            
            interaction_coulomb_exposer.def( 
                "internal"
                , internal_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::internal)
                , default_internal_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_internal)
                , ( bp::arg("p"), bp::arg("g"), bp::arg("step")=(int)(1) ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::iondip
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*iondip_function_type )( ::Faunus::point const &,double,double ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_iondip_function_type )( ::Faunus::point const &,double,double ) ;
            
            interaction_coulomb_exposer.def( 
                "iondip"
                , iondip_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::iondip)
                , default_iondip_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_iondip)
                , ( bp::arg("a"), bp::arg("q"), bp::arg("r") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::pot
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*pot_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::point const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_pot_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::point const & ) ;
            
            interaction_coulomb_exposer.def( 
                "pot"
                , pot_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::pot)
                , default_pot_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_pot)
                , ( bp::arg("p"), bp::arg("a") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::potential
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*potential_function_type )( ::std::vector< Faunus::particle > const &,short unsigned int ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_potential_function_type )( ::std::vector< Faunus::particle > const &,short unsigned int ) ;
            
            interaction_coulomb_exposer.def( 
                "potential"
                , potential_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::potential)
                , default_potential_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_potential)
                , ( bp::arg("p"), bp::arg("j") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::potential
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*potential_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::point ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_potential_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::point ) ;
            
            interaction_coulomb_exposer.def( 
                "potential"
                , potential_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::potential)
                , default_potential_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_potential)
                , ( bp::arg("p"), bp::arg("a") ) );
        
        }
        interaction_coulomb_exposer.def_readonly( "pair", &Faunus::interaction< Faunus::pot_coulomb >::pair );
    }

    { //::Faunus::markovmove
        typedef bp::class_< markovmove_wrapper, boost::noncopyable > markovmove_exposer_t;
        markovmove_exposer_t markovmove_exposer = markovmove_exposer_t( "markovmove", bp::init< Faunus::ensemble &, Faunus::container &, Faunus::energybase & >(( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") )) );
        bp::scope markovmove_scope( markovmove_exposer );
        bp::enum_< Faunus::markovmove::keys>("keys")
            .value("OK", Faunus::markovmove::OK)
            .value("ENERGY", Faunus::markovmove::ENERGY)
            .value("HC", Faunus::markovmove::HC)
            .export_values()
            ;
        { //::Faunus::markovmove::accepted
        
            typedef float ( ::Faunus::markovmove::*accepted_function_type )(  ) ;
            
            markovmove_exposer.def( 
                "accepted"
                , accepted_function_type( &::Faunus::markovmove::accepted ) );
        
        }
        { //::Faunus::markovmove::adjust_dp
        
            typedef void ( ::Faunus::markovmove::*adjust_dp_function_type )( float,float ) ;
            
            markovmove_exposer.def( 
                "adjust_dp"
                , adjust_dp_function_type( &::Faunus::markovmove::adjust_dp )
                , ( bp::arg("arg0")=30, bp::arg("arg1")=40 ) );
        
        }
        { //::Faunus::markovmove::info
        
            typedef ::std::string ( ::Faunus::markovmove::*info_function_type )(  ) ;
            typedef ::std::string ( markovmove_wrapper::*default_info_function_type )(  ) ;
            
            markovmove_exposer.def( 
                "info"
                , info_function_type(&::Faunus::markovmove::info)
                , default_info_function_type(&markovmove_wrapper::default_info) );
        
        }
        { //::Faunus::markovmove::run
        
            typedef bool ( ::Faunus::markovmove::*run_function_type )( float ) ;
            
            markovmove_exposer.def( 
                "run"
                , run_function_type( &::Faunus::markovmove::run )
                , ( bp::arg("arg0") ) );
        
        }
        markovmove_exposer.def_readwrite( "dp", &Faunus::markovmove::dp );
        markovmove_exposer.def_readwrite( "du", &Faunus::markovmove::du );
        markovmove_exposer.add_property( "pot"
                    , bp::make_function( (::Faunus::energybase * (*)( ::Faunus::markovmove const & ))(&markovmove_wrapper::get_pot), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::Faunus::markovmove &,::Faunus::energybase * ))(&markovmove_wrapper::set_pot), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        markovmove_exposer.def_readwrite( "rc", &Faunus::markovmove::rc );
        markovmove_exposer.def_readwrite( "utot", &Faunus::markovmove::utot );
    }

    { //::Faunus::pot_lj
        typedef bp::class_< pot_lj_wrapper > pot_lj_exposer_t;
        pot_lj_exposer_t pot_lj_exposer = pot_lj_exposer_t( "pot_lj", bp::init< Faunus::inputfile & >(( bp::arg("in") )) );
        bp::scope pot_lj_scope( pot_lj_exposer );
        bp::implicitly_convertible< Faunus::inputfile &, Faunus::pot_lj >();
        pot_lj_exposer.def( bp::init< double >(( bp::arg("epsilon") )) );
        bp::implicitly_convertible< double, Faunus::pot_lj >();
        { //::Faunus::pot_lj::info
        
            typedef ::std::string ( ::Faunus::pot_lj::*info_function_type )(  ) ;
            typedef ::std::string ( pot_lj_wrapper::*default_info_function_type )(  ) ;
            
            pot_lj_exposer.def( 
                "info"
                , info_function_type(&::Faunus::pot_lj::info)
                , default_info_function_type(&pot_lj_wrapper::default_info) );
        
        }
        { //::Faunus::pot_lj::lj
        
            typedef double ( ::Faunus::pot_lj::*lj_function_type )( ::Faunus::particle const &,::Faunus::particle const &,double const & ) const;
            
            pot_lj_exposer.def( 
                "lj"
                , lj_function_type( &::Faunus::pot_lj::lj )
                , ( bp::arg("p1"), bp::arg("p2"), bp::arg("r2") ) );
        
        }
        { //::Faunus::pot_lj::lj
        
            typedef void ( ::Faunus::pot_lj::*lj_function_type )( ::Faunus::particle const &,::Faunus::particle const &,double const &,double & ) const;
            
            pot_lj_exposer.def( 
                "lj"
                , lj_function_type( &::Faunus::pot_lj::lj )
                , ( bp::arg("p1"), bp::arg("p2"), bp::arg("r2"), bp::arg("u") ) );
        
        }
        { //::Faunus::pot_lj::setvolume
        
            typedef void ( ::Faunus::pot_lj::*setvolume_function_type )( double ) ;
            typedef void ( pot_lj_wrapper::*default_setvolume_function_type )( double ) ;
            
            pot_lj_exposer.def( 
                "setvolume"
                , setvolume_function_type(&::Faunus::pot_lj::setvolume)
                , default_setvolume_function_type(&pot_lj_wrapper::default_setvolume)
                , ( bp::arg("arg0") ) );
        
        }
        pot_lj_exposer.def_readwrite( "cite", &Faunus::pot_lj::cite );
        pot_lj_exposer.def_readwrite( "eps", &Faunus::pot_lj::eps );
        pot_lj_exposer.def_readwrite( "f", &Faunus::pot_lj::f );
        pot_lj_exposer.def_readwrite( "name", &Faunus::pot_lj::name );
    }

    { //::Faunus::pot_coulomb
        typedef bp::class_< pot_coulomb_wrapper, bp::bases< Faunus::pot_lj > > pot_coulomb_exposer_t;
        pot_coulomb_exposer_t pot_coulomb_exposer = pot_coulomb_exposer_t( "pot_coulomb", bp::init< Faunus::inputfile & >(( bp::arg("in") )) );
        bp::scope pot_coulomb_scope( pot_coulomb_exposer );
        bp::implicitly_convertible< Faunus::inputfile &, Faunus::pot_coulomb >();
        { //::Faunus::pot_coulomb::info
        
            typedef ::std::string ( ::Faunus::pot_coulomb::*info_function_type )(  ) ;
            typedef ::std::string ( pot_coulomb_wrapper::*default_info_function_type )(  ) ;
            
            pot_coulomb_exposer.def( 
                "info"
                , info_function_type(&::Faunus::pot_coulomb::info)
                , default_info_function_type(&pot_coulomb_wrapper::default_info) );
        
        }
        { //::Faunus::pot_coulomb::pairpot
        
            typedef double ( ::Faunus::pot_coulomb::*pairpot_function_type )( ::Faunus::particle const &,::Faunus::particle const & ) ;
            
            pot_coulomb_exposer.def( 
                "pairpot"
                , pairpot_function_type( &::Faunus::pot_coulomb::pairpot )
                , ( bp::arg("p1"), bp::arg("p2") ) );
        
        }
        { //::Faunus::pot_coulomb::sqdist
        
            typedef double ( ::Faunus::pot_coulomb::*sqdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            
            pot_coulomb_exposer.def( 
                "sqdist"
                , sqdist_function_type( &::Faunus::pot_coulomb::sqdist )
                , ( bp::arg("p1"), bp::arg("p2") ) );
        
        }
        { //::Faunus::pot_lj::setvolume
        
            typedef void ( ::Faunus::pot_lj::*setvolume_function_type )( double ) ;
            typedef void ( pot_coulomb_wrapper::*default_setvolume_function_type )( double ) ;
            
            pot_coulomb_exposer.def( 
                "setvolume"
                , setvolume_function_type(&::Faunus::pot_lj::setvolume)
                , default_setvolume_function_type(&pot_coulomb_wrapper::default_setvolume)
                , ( bp::arg("arg0") ) );
        
        }
    }

    bp::class_< random_wrapper, boost::noncopyable >( "random", bp::no_init )    
        .def( 
            "random_half"
            , (double ( ::Faunus::random::* )(  ) )( &::Faunus::random::random_half ) )    
        .def( 
            "random_one"
            , bp::pure_virtual( (double ( ::Faunus::random::* )(  ) )(&::Faunus::random::random_one) ) )    
        .def( 
            "random_seed"
            , bp::pure_virtual( (void ( ::Faunus::random::* )( unsigned int ) )(&::Faunus::random::random_seed) )
            , ( bp::arg("arg0")=(unsigned int)(0) ) )    
        .def( 
            "runtest"
            , (bool ( ::Faunus::random::* )( float ) )( &::Faunus::random::runtest )
            , ( bp::arg("arg0")=5.0e-1 ) );

    bp::class_< randomDefault_wrapper, bp::bases< Faunus::random >, boost::noncopyable >( "randomDefault", bp::init< >() )    
        .def( 
            "random_one"
            , (double ( ::Faunus::randomDefault::* )(  ) )(&::Faunus::randomDefault::random_one)
            , (double ( randomDefault_wrapper::* )(  ) )(&randomDefault_wrapper::default_random_one) )    
        .def( 
            "random_seed"
            , (void ( ::Faunus::randomDefault::* )( unsigned int ) )(&::Faunus::randomDefault::random_seed)
            , (void ( randomDefault_wrapper::* )( unsigned int ) )(&randomDefault_wrapper::default_random_seed)
            , ( bp::arg("arg0")=(unsigned int)(0) ) );

    bp::class_< randomTwister_wrapper, bp::bases< Faunus::random >, boost::noncopyable >( "randomTwister", bp::no_init )    
        .def( 
            "random_one"
            , (double ( ::Faunus::randomTwister::* )(  ) )(&::Faunus::randomTwister::random_one)
            , (double ( randomTwister_wrapper::* )(  ) )(&randomTwister_wrapper::default_random_one) )    
        .def( 
            "random_seed"
            , (void ( ::Faunus::randomTwister::* )( unsigned int ) )(&::Faunus::randomTwister::random_seed)
            , (void ( randomTwister_wrapper::* )( unsigned int ) )(&randomTwister_wrapper::default_random_seed)
            , ( bp::arg("arg0")=(unsigned int)(0) ) );

    bp::class_< saltmove_wrapper, bp::bases< Faunus::markovmove >, boost::noncopyable >( "saltmove", bp::init< Faunus::ensemble &, Faunus::container &, Faunus::energybase & >(( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") )) )    
        .def( bp::init< Faunus::ensemble &, Faunus::container &, Faunus::energybase &, Faunus::inputfile & >(( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3") )) )    
        .def( 
            "info"
            , (::std::string ( ::Faunus::saltmove::* )(  ) )(&::Faunus::saltmove::info)
            , (::std::string ( saltmove_wrapper::* )(  ) )(&saltmove_wrapper::default_info) )    
        .def( 
            "move"
            , (double ( ::Faunus::saltmove::* )( ::Faunus::group &,int ) )( &::Faunus::saltmove::move )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "move"
            , (double ( ::Faunus::saltmove::* )( ::Faunus::group & ) )( &::Faunus::saltmove::move )
            , ( bp::arg("arg0") ) );

    bp::class_< slit_wrapper, bp::bases< Faunus::box >, boost::noncopyable >( "slit", bp::no_init )    
        .def( 
            "boundary"
            , (void ( ::Faunus::slit::* )( ::Faunus::point & ) )(&::Faunus::slit::boundary)
            , (void ( slit_wrapper::* )( ::Faunus::point & ) )(&slit_wrapper::default_boundary)
            , ( bp::arg("a") ) )    
        .def( 
            "info"
            , (::std::string ( ::Faunus::slit::* )(  ) )(&::Faunus::slit::info)
            , (::std::string ( slit_wrapper::* )(  ) )(&slit_wrapper::default_info) )    
        .def( 
            "collision"
            , (bool ( ::Faunus::box::* )( ::Faunus::particle const & ) )(&::Faunus::box::collision)
            , (bool ( slit_wrapper::* )( ::Faunus::particle const & ) )(&slit_wrapper::default_collision)
            , ( bp::arg("a") ) )    
        .def( 
            "collision"
            , (bool ( ::Faunus::box::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&::Faunus::box::collision)
            , (bool ( slit_wrapper::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&slit_wrapper::default_collision)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "dist"
            , (double ( ::Faunus::box::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::box::dist)
            , (double ( slit_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&slit_wrapper::default_dist)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "povray"
            , (::std::string ( ::Faunus::box::* )(  ) )(&::Faunus::box::povray)
            , (::std::string ( slit_wrapper::* )(  ) )(&slit_wrapper::default_povray) )    
        .def( 
            "randompos"
            , (void ( ::Faunus::box::* )( ::Faunus::point & ) )(&::Faunus::box::randompos)
            , (void ( slit_wrapper::* )( ::Faunus::point & ) )(&slit_wrapper::default_randompos)
            , ( bp::arg("arg0") ) )    
        .def( 
            "randompos"
            , (::Faunus::point ( ::Faunus::box::* )(  ) )( &::Faunus::box::randompos ) )    
        .def( 
            "scale"
            , (void ( ::Faunus::box::* )( ::Faunus::point &,double const & ) const)(&::Faunus::box::scale)
            , (void ( slit_wrapper::* )( ::Faunus::point &,double const & ) const)(&slit_wrapper::default_scale)
            , ( bp::arg("a"), bp::arg("newlen") ) )    
        .def( 
            "setvolume"
            , (void ( ::Faunus::box::* )( double ) )(&::Faunus::box::setvolume)
            , (void ( slit_wrapper::* )( double ) )(&slit_wrapper::default_setvolume)
            , ( bp::arg("arg0") ) )    
        .def( 
            "sqdist"
            , (double ( ::Faunus::box::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::box::sqdist)
            , (double ( slit_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&slit_wrapper::default_sqdist)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "vdist"
            , (::Faunus::point ( ::Faunus::box::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::box::vdist)
            , (::Faunus::point ( slit_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&slit_wrapper::default_vdist)
            , ( bp::arg("a"), bp::arg("b") ) );

    { //::Faunus::spherical
        typedef bp::class_< Faunus::spherical, boost::noncopyable > spherical_exposer_t;
        spherical_exposer_t spherical_exposer = spherical_exposer_t( "spherical", bp::init< bp::optional< double, double, double > >(( bp::arg("arg0")=0, bp::arg("arg1")=0, bp::arg("arg2")=0 )) );
        bp::scope spherical_scope( spherical_exposer );
        { //::Faunus::spherical::cartesian
        
            typedef ::Faunus::point ( ::Faunus::spherical::*cartesian_function_type )(  ) ;
            
            spherical_exposer.def( 
                "cartesian"
                , cartesian_function_type( &::Faunus::spherical::cartesian ) );
        
        }
        { //::Faunus::spherical::operator=
        
            typedef void ( ::Faunus::spherical::*assign_function_type )( ::Faunus::point & ) ;
            
            spherical_exposer.def( 
                "assign"
                , assign_function_type( &::Faunus::spherical::operator= )
                , ( bp::arg("p") ) );
        
        }
        { //::Faunus::spherical::random_angles
        
            typedef void ( ::Faunus::spherical::*random_angles_function_type )(  ) ;
            
            spherical_exposer.def( 
                "random_angles"
                , random_angles_function_type( &::Faunus::spherical::random_angles ) );
        
        }
        spherical_exposer.def_readwrite( "phi", &Faunus::spherical::phi );
        spherical_exposer.def_readwrite( "r", &Faunus::spherical::r );
        spherical_exposer.def_readwrite( "theta", &Faunus::spherical::theta );
    }

    { //::Faunus::systemenergy
        typedef bp::class_< systemenergy_wrapper, bp::bases< Faunus::analysis >, boost::noncopyable > systemenergy_exposer_t;
        systemenergy_exposer_t systemenergy_exposer = systemenergy_exposer_t( "systemenergy", bp::init< double >(( bp::arg("arg0") )) );
        bp::scope systemenergy_scope( systemenergy_exposer );
        bp::implicitly_convertible< double, Faunus::systemenergy >();
        { //::Faunus::systemenergy::confuout
        
            typedef ::std::string ( ::Faunus::systemenergy::*confuout_function_type )(  ) ;
            
            systemenergy_exposer.def( 
                "confuout"
                , confuout_function_type( &::Faunus::systemenergy::confuout ) );
        
        }
        { //::Faunus::systemenergy::info
        
            typedef ::std::string ( ::Faunus::systemenergy::*info_function_type )(  ) ;
            typedef ::std::string ( systemenergy_wrapper::*default_info_function_type )(  ) ;
            
            systemenergy_exposer.def( 
                "info"
                , info_function_type(&::Faunus::systemenergy::info)
                , default_info_function_type(&systemenergy_wrapper::default_info) );
        
        }
        systemenergy_exposer.def( bp::self += bp::other< double >() );
        { //::Faunus::systemenergy::track
        
            typedef void ( ::Faunus::systemenergy::*track_function_type )(  ) ;
            
            systemenergy_exposer.def( 
                "track"
                , track_function_type( &::Faunus::systemenergy::track ) );
        
        }
        { //::Faunus::systemenergy::update
        
            typedef void ( ::Faunus::systemenergy::*update_function_type )( double ) ;
            
            systemenergy_exposer.def( 
                "update"
                , update_function_type( &::Faunus::systemenergy::update )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::systemenergy::write
        
            typedef void ( ::Faunus::systemenergy::*write_function_type )(  ) ;
            
            systemenergy_exposer.def( 
                "write"
                , write_function_type( &::Faunus::systemenergy::write ) );
        
        }
        systemenergy_exposer.def_readwrite( "cur", &Faunus::systemenergy::cur );
        systemenergy_exposer.def_readwrite( "sum", &Faunus::systemenergy::sum );
        systemenergy_exposer.def_readonly( "uavg", &Faunus::systemenergy::uavg );
    }

    { //::Faunus::widom
        typedef bp::class_< widom_wrapper, bp::bases< Faunus::analysis >, boost::noncopyable > widom_exposer_t;
        widom_exposer_t widom_exposer = widom_exposer_t( "widom", bp::init< bp::optional< int > >(( bp::arg("n")=(int)(10) )) );
        bp::scope widom_scope( widom_exposer );
        bp::implicitly_convertible< int, Faunus::widom >();
        { //::Faunus::widom::add
        
            typedef void ( ::Faunus::widom::*add_function_type )( ::Faunus::particle ) ;
            
            widom_exposer.def( 
                "add"
                , add_function_type( &::Faunus::widom::add )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::widom::add
        
            typedef void ( ::Faunus::widom::*add_function_type )( ::Faunus::container & ) ;
            
            widom_exposer.def( 
                "add"
                , add_function_type( &::Faunus::widom::add )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::widom::gamma
        
            typedef double ( ::Faunus::widom::*gamma_function_type )(  ) ;
            
            widom_exposer.def( 
                "gamma"
                , gamma_function_type( &::Faunus::widom::gamma ) );
        
        }
        { //::Faunus::widom::info
        
            typedef ::std::string ( ::Faunus::widom::*info_function_type )(  ) ;
            typedef ::std::string ( widom_wrapper::*default_info_function_type )(  ) ;
            
            widom_exposer.def( 
                "info"
                , info_function_type(&::Faunus::widom::info)
                , default_info_function_type(&widom_wrapper::default_info) );
        
        }
        { //::Faunus::widom::insert
        
            typedef void ( ::Faunus::widom::*insert_function_type )( ::Faunus::container &,::Faunus::energybase & ) ;
            
            widom_exposer.def( 
                "insert"
                , insert_function_type( &::Faunus::widom::insert )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::widom::muex
        
            typedef double ( ::Faunus::widom::*muex_function_type )(  ) ;
            
            widom_exposer.def( 
                "muex"
                , muex_function_type( &::Faunus::widom::muex ) );
        
        }
    }
}
