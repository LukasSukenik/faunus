// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "particle.pypp.hpp"

namespace bp = boost::python;

void register_particle_class(){

    { //::Faunus::particle
        typedef bp::class_< Faunus::particle, bp::bases< Faunus::point > > particle_exposer_t;
        particle_exposer_t particle_exposer = particle_exposer_t( "particle", bp::init< >() );
        bp::scope particle_scope( particle_exposer );
        { //::Faunus::particle::mw2rad
        
            typedef double ( ::Faunus::particle::*mw2rad_function_type )( double ) const;
            
            particle_exposer.def( 
                "mw2rad"
                , mw2rad_function_type( &::Faunus::particle::mw2rad )
                , ( bp::arg("arg0")=1 ) );
        
        }
        { //::Faunus::particle::mw2vol
        
            typedef double ( ::Faunus::particle::*mw2vol_function_type )( double ) const;
            
            particle_exposer.def( 
                "mw2vol"
                , mw2vol_function_type( &::Faunus::particle::mw2vol )
                , ( bp::arg("arg0")=1 ) );
        
        }
        { //::Faunus::particle::operator=
        
            typedef ::Faunus::particle & ( ::Faunus::particle::*assign_function_type )( ::Faunus::point const & ) ;
            
            particle_exposer.def( 
                "assign"
                , assign_function_type( &::Faunus::particle::operator= )
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
        { //::Faunus::particle::overlap
        
            typedef bool ( ::Faunus::particle::*overlap_function_type )( ::Faunus::particle const & ) const;
            
            particle_exposer.def( 
                "overlap"
                , overlap_function_type( &::Faunus::particle::overlap )
                , ( bp::arg("p") ) );
        
        }
        { //::Faunus::particle::overlap
        
            typedef bool ( ::Faunus::particle::*overlap_function_type )( ::Faunus::particle const &,double const & ) const;
            
            particle_exposer.def( 
                "overlap"
                , overlap_function_type( &::Faunus::particle::overlap )
                , ( bp::arg("p"), bp::arg("s") ) );
        
        }
        { //::Faunus::particle::overlap
        
            typedef bool ( ::Faunus::particle::*overlap_function_type )( ::Faunus::particle const &,double const &,double const & ) const;
            
            particle_exposer.def( 
                "overlap"
                , overlap_function_type( &::Faunus::particle::overlap )
                , ( bp::arg("p"), bp::arg("len"), bp::arg("halflen") ) );
        
        }
        { //::Faunus::particle::potential
        
            typedef double ( ::Faunus::particle::*potential_function_type )( ::Faunus::point const & ) ;
            
            particle_exposer.def( 
                "potential"
                , potential_function_type( &::Faunus::particle::potential )
                , ( bp::arg("p") ) );
        
        }
        { //::Faunus::particle::volume
        
            typedef double ( ::Faunus::particle::*volume_function_type )(  ) const;
            
            particle_exposer.def( 
                "volume"
                , volume_function_type( &::Faunus::particle::volume ) );
        
        }
        particle_exposer.def_readwrite( "charge", &Faunus::particle::charge );
        particle_exposer.def_readwrite( "hydrophobic", &Faunus::particle::hydrophobic );
        particle_exposer.def_readwrite( "id", &Faunus::particle::id );
        particle_exposer.def_readwrite( "mw", &Faunus::particle::mw );
        particle_exposer.def_readwrite( "radius", &Faunus::particle::radius );
    }

}
