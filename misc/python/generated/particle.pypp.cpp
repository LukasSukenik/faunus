// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "particle.pypp.hpp"

namespace bp = boost::python;

void register_particle_class(){

    { //::Faunus::particle
        typedef bp::class_< Faunus::particle, bp::bases< Faunus::point >, boost::noncopyable > particle_exposer_t;
        particle_exposer_t particle_exposer = particle_exposer_t( "particle", bp::init< >() );
        bp::scope particle_scope( particle_exposer );
        bp::enum_< Faunus::particle::type>("type")
            .value("FIRST", Faunus::particle::FIRST)
            .value("GLY", Faunus::particle::GLY)
            .value("ALA", Faunus::particle::ALA)
            .value("VAL", Faunus::particle::VAL)
            .value("LEU", Faunus::particle::LEU)
            .value("ILE", Faunus::particle::ILE)
            .value("PHE", Faunus::particle::PHE)
            .value("TRP", Faunus::particle::TRP)
            .value("TYR", Faunus::particle::TYR)
            .value("HIS", Faunus::particle::HIS)
            .value("SER", Faunus::particle::SER)
            .value("THR", Faunus::particle::THR)
            .value("MET", Faunus::particle::MET)
            .value("CYS", Faunus::particle::CYS)
            .value("ASP", Faunus::particle::ASP)
            .value("GLN", Faunus::particle::GLN)
            .value("GLU", Faunus::particle::GLU)
            .value("ASN", Faunus::particle::ASN)
            .value("LYS", Faunus::particle::LYS)
            .value("ARG", Faunus::particle::ARG)
            .value("PRO", Faunus::particle::PRO)
            .value("UNK", Faunus::particle::UNK)
            .value("NTR", Faunus::particle::NTR)
            .value("CTR", Faunus::particle::CTR)
            .value("NA", Faunus::particle::NA)
            .value("K", Faunus::particle::K)
            .value("F", Faunus::particle::F)
            .value("CL", Faunus::particle::CL)
            .value("BR", Faunus::particle::BR)
            .value("I", Faunus::particle::I)
            .value("SO4", Faunus::particle::SO4)
            .value("PO4", Faunus::particle::PO4)
            .value("LA", Faunus::particle::LA)
            .value("ION", Faunus::particle::ION)
            .value("CATION", Faunus::particle::CATION)
            .value("ANION", Faunus::particle::ANION)
            .value("GHOST", Faunus::particle::GHOST)
            .value("RNH3", Faunus::particle::RNH3)
            .value("RNH4", Faunus::particle::RNH4)
            .value("RCOOH", Faunus::particle::RCOOH)
            .value("RCOO", Faunus::particle::RCOO)
            .value("HYDROPHOBIC", Faunus::particle::HYDROPHOBIC)
            .value("LAST", Faunus::particle::LAST)
            .export_values()
            ;
        { //::Faunus::particle::mw2rad
        
            typedef double ( ::Faunus::particle::*mw2rad_function_type )( double ) const;
            
            particle_exposer.def( 
                "mw2rad"
                , mw2rad_function_type( &::Faunus::particle::mw2rad )
                , ( bp::arg("arg0")=1 ) );
        
        }
        { //::Faunus::particle::mw2vol
        
            typedef double ( ::Faunus::particle::*mw2vol_function_type )( double ) const;
            
            particle_exposer.def( 
                "mw2vol"
                , mw2vol_function_type( &::Faunus::particle::mw2vol )
                , ( bp::arg("arg0")=1 ) );
        
        }
        { //::Faunus::particle::operator=
        
            typedef ::Faunus::particle & ( ::Faunus::particle::*assign_function_type )( ::Faunus::point const & ) ;
            
            particle_exposer.def( 
                "assign"
                , assign_function_type( &::Faunus::particle::operator= )
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
        { //::Faunus::particle::overlap
        
            typedef bool ( ::Faunus::particle::*overlap_function_type )( ::Faunus::particle const & ) const;
            
            particle_exposer.def( 
                "overlap"
                , overlap_function_type( &::Faunus::particle::overlap )
                , ( bp::arg("p") ) );
        
        }
        { //::Faunus::particle::overlap
        
            typedef bool ( ::Faunus::particle::*overlap_function_type )( ::Faunus::particle const &,double const & ) const;
            
            particle_exposer.def( 
                "overlap"
                , overlap_function_type( &::Faunus::particle::overlap )
                , ( bp::arg("p"), bp::arg("s") ) );
        
        }
        { //::Faunus::particle::overlap
        
            typedef bool ( ::Faunus::particle::*overlap_function_type )( ::Faunus::particle const &,double const &,double const & ) const;
            
            particle_exposer.def( 
                "overlap"
                , overlap_function_type( &::Faunus::particle::overlap )
                , ( bp::arg("p"), bp::arg("len"), bp::arg("halflen") ) );
        
        }
        { //::Faunus::particle::potential
        
            typedef double ( ::Faunus::particle::*potential_function_type )( ::Faunus::point const & ) ;
            
            particle_exposer.def( 
                "potential"
                , potential_function_type( &::Faunus::particle::potential )
                , ( bp::arg("p") ) );
        
        }
        { //::Faunus::particle::volume
        
            typedef double ( ::Faunus::particle::*volume_function_type )(  ) const;
            
            particle_exposer.def( 
                "volume"
                , volume_function_type( &::Faunus::particle::volume ) );
        
        }
        particle_exposer.def_readwrite( "charge", &Faunus::particle::charge );
        particle_exposer.def_readwrite( "hydrophobic", &Faunus::particle::hydrophobic );
        particle_exposer.def_readwrite( "id", &Faunus::particle::id );
        particle_exposer.def_readwrite( "mw", &Faunus::particle::mw );
        particle_exposer.def_readwrite( "radius", &Faunus::particle::radius );
    }

}
