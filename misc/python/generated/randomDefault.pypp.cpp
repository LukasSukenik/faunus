// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "randomDefault.pypp.hpp"

namespace bp = boost::python;

struct randomDefault_wrapper : Faunus::randomDefault, bp::wrapper< Faunus::randomDefault > {

    randomDefault_wrapper(Faunus::randomDefault const & arg )
    : Faunus::randomDefault( arg )
      , bp::wrapper< Faunus::randomDefault >(){
        // copy constructor
        
    }

    randomDefault_wrapper( )
    : Faunus::randomDefault( )
      , bp::wrapper< Faunus::randomDefault >(){
        // null constructor
    
    }

    virtual double random_one(  ) {
        if( bp::override func_random_one = this->get_override( "random_one" ) )
            return func_random_one(  );
        else
            return this->Faunus::randomDefault::random_one(  );
    }
    
    
    double default_random_one(  ) {
        return Faunus::randomDefault::random_one( );
    }

    virtual void random_seed( int arg0=0 ) {
        if( bp::override func_random_seed = this->get_override( "random_seed" ) )
            func_random_seed( arg0 );
        else
            this->Faunus::randomDefault::random_seed( arg0 );
    }
    
    
    void default_random_seed( int arg0=0 ) {
        Faunus::randomDefault::random_seed( arg0 );
    }

};

void register_randomDefault_class(){

    bp::class_< randomDefault_wrapper, bp::bases< Faunus::random > >( "randomDefault", bp::init< >() )    
        .def( 
            "random_one"
            , (double ( ::Faunus::randomDefault::* )(  ) )(&::Faunus::randomDefault::random_one)
            , (double ( randomDefault_wrapper::* )(  ) )(&randomDefault_wrapper::default_random_one) )    
        .def( 
            "random_seed"
            , (void ( ::Faunus::randomDefault::* )( int ) )(&::Faunus::randomDefault::random_seed)
            , (void ( randomDefault_wrapper::* )( int ) )(&randomDefault_wrapper::default_random_seed)
            , ( bp::arg("arg0")=(int)(0) ) );

}
