// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "pot_coulomb.pypp.hpp"

namespace bp = boost::python;

struct pot_coulomb_wrapper : Faunus::pot_coulomb, bp::wrapper< Faunus::pot_coulomb > {

    pot_coulomb_wrapper(Faunus::pot_coulomb const & arg )
    : Faunus::pot_coulomb( arg )
      , bp::wrapper< Faunus::pot_coulomb >(){
        // copy constructor
        
    }

    pot_coulomb_wrapper(::Faunus::inputfile & in )
    : Faunus::pot_coulomb( boost::ref(in) )
      , bp::wrapper< Faunus::pot_coulomb >(){
        // constructor
    
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::pot_coulomb::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::pot_coulomb::info( );
    }

    virtual void setvolume( double arg0 ) {
        if( bp::override func_setvolume = this->get_override( "setvolume" ) )
            func_setvolume( arg0 );
        else
            this->Faunus::pot_lj::setvolume( arg0 );
    }
    
    
    void default_setvolume( double arg0 ) {
        Faunus::pot_lj::setvolume( arg0 );
    }

};

void register_pot_coulomb_class(){

    { //::Faunus::pot_coulomb
        typedef bp::class_< pot_coulomb_wrapper, bp::bases< Faunus::pot_lj > > pot_coulomb_exposer_t;
        pot_coulomb_exposer_t pot_coulomb_exposer = pot_coulomb_exposer_t( "pot_coulomb", bp::init< Faunus::inputfile & >(( bp::arg("in") )) );
        bp::scope pot_coulomb_scope( pot_coulomb_exposer );
        bp::implicitly_convertible< Faunus::inputfile &, Faunus::pot_coulomb >();
        { //::Faunus::pot_coulomb::info
        
            typedef ::std::string ( ::Faunus::pot_coulomb::*info_function_type )(  ) ;
            typedef ::std::string ( pot_coulomb_wrapper::*default_info_function_type )(  ) ;
            
            pot_coulomb_exposer.def( 
                "info"
                , info_function_type(&::Faunus::pot_coulomb::info)
                , default_info_function_type(&pot_coulomb_wrapper::default_info) );
        
        }
        { //::Faunus::pot_coulomb::pairpot
        
            typedef double ( ::Faunus::pot_coulomb::*pairpot_function_type )( ::Faunus::particle const &,::Faunus::particle const & ) ;
            
            pot_coulomb_exposer.def( 
                "pairpot"
                , pairpot_function_type( &::Faunus::pot_coulomb::pairpot )
                , ( bp::arg("p1"), bp::arg("p2") ) );
        
        }
        { //::Faunus::pot_coulomb::sqdist
        
            typedef double ( ::Faunus::pot_coulomb::*sqdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            
            pot_coulomb_exposer.def( 
                "sqdist"
                , sqdist_function_type( &::Faunus::pot_coulomb::sqdist )
                , ( bp::arg("p1"), bp::arg("p2") ) );
        
        }
        { //::Faunus::pot_lj::setvolume
        
            typedef void ( ::Faunus::pot_lj::*setvolume_function_type )( double ) ;
            typedef void ( pot_coulomb_wrapper::*default_setvolume_function_type )( double ) ;
            
            pot_coulomb_exposer.def( 
                "setvolume"
                , setvolume_function_type(&::Faunus::pot_lj::setvolume)
                , default_setvolume_function_type(&pot_coulomb_wrapper::default_setvolume)
                , ( bp::arg("arg0") ) );
        
        }
    }

}
