// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "iopqr.pypp.hpp"

namespace bp = boost::python;

struct iopqr_wrapper : Faunus::iopqr, bp::wrapper< Faunus::iopqr > {

    iopqr_wrapper(Faunus::iopqr const & arg )
    : Faunus::iopqr( arg )
      , bp::wrapper< Faunus::iopqr >(){
        // copy constructor
        
    }

    iopqr_wrapper(::Faunus::atoms & arg0 )
    : Faunus::iopqr( boost::ref(arg0) )
      , bp::wrapper< Faunus::iopqr >(){
        // constructor
    
    }

    virtual bool save( ::std::string arg0, ::std::vector< Faunus::particle > & arg1 ) {
        if( bp::override func_save = this->get_override( "save" ) )
            return func_save( arg0, boost::ref(arg1) );
        else
            return this->Faunus::iopqr::save( arg0, boost::ref(arg1) );
    }
    
    
    bool default_save( ::std::string arg0, ::std::vector< Faunus::particle > & arg1 ) {
        return Faunus::iopqr::save( arg0, boost::ref(arg1) );
    }

};

void register_iopqr_class(){

    { //::Faunus::iopqr
        typedef bp::class_< iopqr_wrapper > iopqr_exposer_t;
        iopqr_exposer_t iopqr_exposer = iopqr_exposer_t( "iopqr", bp::init< Faunus::atoms & >(( bp::arg("arg0") )) );
        bp::scope iopqr_scope( iopqr_exposer );
        bp::implicitly_convertible< Faunus::atoms &, Faunus::iopqr >();
        { //::Faunus::iopqr::save
        
            typedef bool ( ::Faunus::iopqr::*save_function_type )( ::std::string,::std::vector< Faunus::particle > & ) ;
            typedef bool ( iopqr_wrapper::*default_save_function_type )( ::std::string,::std::vector< Faunus::particle > & ) ;
            
            iopqr_exposer.def( 
                "save"
                , save_function_type(&::Faunus::iopqr::save)
                , default_save_function_type(&iopqr_wrapper::default_save)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::iopqr::save
        
            typedef bool ( ::Faunus::iopqr::*save_function_type )( ::std::string,::std::vector< Faunus::particle > &,::Faunus::titrate & ) ;
            
            iopqr_exposer.def( 
                "save"
                , save_function_type( &::Faunus::iopqr::save )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
    }

}
