// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "slit.pypp.hpp"

namespace bp = boost::python;

struct slit_wrapper : Faunus::slit, bp::wrapper< Faunus::slit > {

    virtual void boundary( ::Faunus::point & a ) {
        if( bp::override func_boundary = this->get_override( "boundary" ) )
            func_boundary( boost::ref(a) );
        else
            this->Faunus::slit::boundary( boost::ref(a) );
    }
    
    
    void default_boundary( ::Faunus::point & a ) {
        Faunus::slit::boundary( boost::ref(a) );
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::slit::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::slit::info( );
    }

    virtual bool collision( ::Faunus::particle const & a ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(a) );
        else
            return this->Faunus::box::collision( boost::ref(a) );
    }
    
    
    bool default_collision( ::Faunus::particle const & a ) {
        return Faunus::box::collision( boost::ref(a) );
    }

    virtual bool collision( ::Faunus::particle const & a, ::Faunus::particle const & b ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::collision( boost::ref(a), boost::ref(b) );
    }
    
    
    bool default_collision( ::Faunus::particle const & a, ::Faunus::particle const & b ) {
        return Faunus::box::collision( boost::ref(a), boost::ref(b) );
    }

    virtual double dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_dist = this->get_override( "dist" ) )
            return func_dist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::dist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_dist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::box::dist( boost::ref(a), boost::ref(b) );
    }

    virtual ::std::string povray(  ) {
        if( bp::override func_povray = this->get_override( "povray" ) )
            return func_povray(  );
        else
            return this->Faunus::box::povray(  );
    }
    
    
    ::std::string default_povray(  ) {
        return Faunus::box::povray( );
    }

    virtual void randompos( ::Faunus::point & arg0 ) {
        if( bp::override func_randompos = this->get_override( "randompos" ) )
            func_randompos( boost::ref(arg0) );
        else
            this->Faunus::box::randompos( boost::ref(arg0) );
    }
    
    
    void default_randompos( ::Faunus::point & arg0 ) {
        Faunus::box::randompos( boost::ref(arg0) );
    }

    virtual void scale( ::Faunus::point & a, double const & newlen ) const  {
        if( bp::override func_scale = this->get_override( "scale" ) )
            func_scale( boost::ref(a), newlen );
        else
            this->Faunus::box::scale( boost::ref(a), newlen );
    }
    
    
    void default_scale( ::Faunus::point & a, double const & newlen ) const  {
        Faunus::box::scale( boost::ref(a), newlen );
    }

    virtual void setvolume( double arg0 ) {
        if( bp::override func_setvolume = this->get_override( "setvolume" ) )
            func_setvolume( arg0 );
        else
            this->Faunus::box::setvolume( arg0 );
    }
    
    
    void default_setvolume( double arg0 ) {
        Faunus::box::setvolume( arg0 );
    }

    virtual double sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_sqdist = this->get_override( "sqdist" ) )
            return func_sqdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::sqdist( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_sqdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::box::sqdist( boost::ref(a), boost::ref(b) );
    }

    virtual ::Faunus::point vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_vdist = this->get_override( "vdist" ) )
            return func_vdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::vdist( boost::ref(a), boost::ref(b) );
    }
    
    
    ::Faunus::point default_vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::box::vdist( boost::ref(a), boost::ref(b) );
    }

};

void register_slit_class(){

    bp::class_< slit_wrapper, bp::bases< Faunus::box >, boost::noncopyable >( "slit", bp::no_init )    
        .def( 
            "boundary"
            , (void ( ::Faunus::slit::* )( ::Faunus::point & ) )(&::Faunus::slit::boundary)
            , (void ( slit_wrapper::* )( ::Faunus::point & ) )(&slit_wrapper::default_boundary)
            , ( bp::arg("a") ) )    
        .def( 
            "info"
            , (::std::string ( ::Faunus::slit::* )(  ) )(&::Faunus::slit::info)
            , (::std::string ( slit_wrapper::* )(  ) )(&slit_wrapper::default_info) )    
        .def( 
            "collision"
            , (bool ( ::Faunus::box::* )( ::Faunus::particle const & ) )(&::Faunus::box::collision)
            , (bool ( slit_wrapper::* )( ::Faunus::particle const & ) )(&slit_wrapper::default_collision)
            , ( bp::arg("a") ) )    
        .def( 
            "collision"
            , (bool ( ::Faunus::box::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&::Faunus::box::collision)
            , (bool ( slit_wrapper::* )( ::Faunus::particle const &,::Faunus::particle const & ) )(&slit_wrapper::default_collision)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "dist"
            , (double ( ::Faunus::box::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::box::dist)
            , (double ( slit_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&slit_wrapper::default_dist)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "povray"
            , (::std::string ( ::Faunus::box::* )(  ) )(&::Faunus::box::povray)
            , (::std::string ( slit_wrapper::* )(  ) )(&slit_wrapper::default_povray) )    
        .def( 
            "randompos"
            , (void ( ::Faunus::box::* )( ::Faunus::point & ) )(&::Faunus::box::randompos)
            , (void ( slit_wrapper::* )( ::Faunus::point & ) )(&slit_wrapper::default_randompos)
            , ( bp::arg("arg0") ) )    
        .def( 
            "randompos"
            , (::Faunus::point ( ::Faunus::box::* )(  ) )( &::Faunus::box::randompos ) )    
        .def( 
            "scale"
            , (void ( ::Faunus::box::* )( ::Faunus::point &,double const & ) const)(&::Faunus::box::scale)
            , (void ( slit_wrapper::* )( ::Faunus::point &,double const & ) const)(&slit_wrapper::default_scale)
            , ( bp::arg("a"), bp::arg("newlen") ) )    
        .def( 
            "setvolume"
            , (void ( ::Faunus::box::* )( double ) )(&::Faunus::box::setvolume)
            , (void ( slit_wrapper::* )( double ) )(&slit_wrapper::default_setvolume)
            , ( bp::arg("arg0") ) )    
        .def( 
            "sqdist"
            , (double ( ::Faunus::box::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::box::sqdist)
            , (double ( slit_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&slit_wrapper::default_sqdist)
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "vdist"
            , (::Faunus::point ( ::Faunus::box::* )( ::Faunus::point const &,::Faunus::point const & ) )(&::Faunus::box::vdist)
            , (::Faunus::point ( slit_wrapper::* )( ::Faunus::point const &,::Faunus::point const & ) )(&slit_wrapper::default_vdist)
            , ( bp::arg("a"), bp::arg("b") ) );

}
