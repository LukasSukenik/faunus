// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "slit.pypp.hpp"

namespace bp = boost::python;

struct slit_wrapper : Faunus::slit, bp::wrapper< Faunus::slit > {

    slit_wrapper(Faunus::slit const & arg )
    : Faunus::slit( arg )
      , bp::wrapper< Faunus::slit >(){
        // copy constructor
        
    }

    slit_wrapper(::Faunus::inputfile & arg0 )
    : Faunus::slit( boost::ref(arg0) )
      , bp::wrapper< Faunus::slit >(){
        // constructor
    
    }

    virtual void boundary( ::Faunus::point & a ) {
        if( bp::override func_boundary = this->get_override( "boundary" ) )
            func_boundary( boost::ref(a) );
        else
            this->Faunus::slit::boundary( boost::ref(a) );
    }
    
    
    void default_boundary( ::Faunus::point & a ) {
        Faunus::slit::boundary( boost::ref(a) );
    }

    virtual double dist( ::Faunus::point const & p1, ::Faunus::point const & p2 ) {
        if( bp::override func_dist = this->get_override( "dist" ) )
            return func_dist( boost::ref(p1), boost::ref(p2) );
        else
            return this->Faunus::slit::dist( boost::ref(p1), boost::ref(p2) );
    }
    
    
    double default_dist( ::Faunus::point const & p1, ::Faunus::point const & p2 ) {
        return Faunus::slit::dist( boost::ref(p1), boost::ref(p2) );
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::slit::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::slit::info( );
    }

    virtual double sqdist( ::Faunus::point const & p1, ::Faunus::point const & p2 ) {
        if( bp::override func_sqdist = this->get_override( "sqdist" ) )
            return func_sqdist( boost::ref(p1), boost::ref(p2) );
        else
            return this->Faunus::slit::sqdist( boost::ref(p1), boost::ref(p2) );
    }
    
    
    double default_sqdist( ::Faunus::point const & p1, ::Faunus::point const & p2 ) {
        return Faunus::slit::sqdist( boost::ref(p1), boost::ref(p2) );
    }

    virtual bool clash( ::Faunus::particle const & a, ::Faunus::particle const & b ) {
        if( bp::override func_clash = this->get_override( "clash" ) )
            return func_clash( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::clash( boost::ref(a), boost::ref(b) );
    }
    
    
    bool default_clash( ::Faunus::particle const & a, ::Faunus::particle const & b ) {
        return Faunus::box::clash( boost::ref(a), boost::ref(b) );
    }

    virtual bool collision( ::Faunus::particle const & a ) {
        if( bp::override func_collision = this->get_override( "collision" ) )
            return func_collision( boost::ref(a) );
        else
            return this->Faunus::box::collision( boost::ref(a) );
    }
    
    
    bool default_collision( ::Faunus::particle const & a ) {
        return Faunus::box::collision( boost::ref(a) );
    }

    virtual ::std::string povray(  ) {
        if( bp::override func_povray = this->get_override( "povray" ) )
            return func_povray(  );
        else
            return this->Faunus::box::povray(  );
    }
    
    
    ::std::string default_povray(  ) {
        return Faunus::box::povray( );
    }

    virtual void randompos( ::Faunus::point & arg0 ) {
        if( bp::override func_randompos = this->get_override( "randompos" ) )
            func_randompos( boost::ref(arg0) );
        else
            this->Faunus::box::randompos( boost::ref(arg0) );
    }
    
    
    void default_randompos( ::Faunus::point & arg0 ) {
        Faunus::box::randompos( boost::ref(arg0) );
    }

    virtual void scale( ::Faunus::point & a, double const & newlen ) const  {
        if( bp::override func_scale = this->get_override( "scale" ) )
            func_scale( boost::ref(a), newlen );
        else
            this->Faunus::box::scale( boost::ref(a), newlen );
    }
    
    
    void default_scale( ::Faunus::point & a, double const & newlen ) const  {
        Faunus::box::scale( boost::ref(a), newlen );
    }

    virtual void setvolume( double arg0 ) {
        if( bp::override func_setvolume = this->get_override( "setvolume" ) )
            func_setvolume( arg0 );
        else
            this->Faunus::box::setvolume( arg0 );
    }
    
    
    void default_setvolume( double arg0 ) {
        Faunus::box::setvolume( arg0 );
    }

    virtual ::Faunus::point vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        if( bp::override func_vdist = this->get_override( "vdist" ) )
            return func_vdist( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::box::vdist( boost::ref(a), boost::ref(b) );
    }
    
    
    ::Faunus::point default_vdist( ::Faunus::point const & a, ::Faunus::point const & b ) {
        return Faunus::box::vdist( boost::ref(a), boost::ref(b) );
    }

};

void register_slit_class(){

    { //::Faunus::slit
        typedef bp::class_< slit_wrapper, bp::bases< Faunus::box > > slit_exposer_t;
        slit_exposer_t slit_exposer = slit_exposer_t( "slit", bp::init< Faunus::inputfile & >(( bp::arg("arg0") )) );
        bp::scope slit_scope( slit_exposer );
        bp::implicitly_convertible< Faunus::inputfile &, Faunus::slit >();
        { //::Faunus::slit::boundary
        
            typedef void ( ::Faunus::slit::*boundary_function_type )( ::Faunus::point & ) ;
            typedef void ( slit_wrapper::*default_boundary_function_type )( ::Faunus::point & ) ;
            
            slit_exposer.def( 
                "boundary"
                , boundary_function_type(&::Faunus::slit::boundary)
                , default_boundary_function_type(&slit_wrapper::default_boundary)
                , ( bp::arg("a") ) );
        
        }
        { //::Faunus::slit::dist
        
            typedef double ( ::Faunus::slit::*dist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            typedef double ( slit_wrapper::*default_dist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            
            slit_exposer.def( 
                "dist"
                , dist_function_type(&::Faunus::slit::dist)
                , default_dist_function_type(&slit_wrapper::default_dist)
                , ( bp::arg("p1"), bp::arg("p2") ) );
        
        }
        { //::Faunus::slit::info
        
            typedef ::std::string ( ::Faunus::slit::*info_function_type )(  ) ;
            typedef ::std::string ( slit_wrapper::*default_info_function_type )(  ) ;
            
            slit_exposer.def( 
                "info"
                , info_function_type(&::Faunus::slit::info)
                , default_info_function_type(&slit_wrapper::default_info) );
        
        }
        { //::Faunus::slit::sqdist
        
            typedef double ( ::Faunus::slit::*sqdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            typedef double ( slit_wrapper::*default_sqdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            
            slit_exposer.def( 
                "sqdist"
                , sqdist_function_type(&::Faunus::slit::sqdist)
                , default_sqdist_function_type(&slit_wrapper::default_sqdist)
                , ( bp::arg("p1"), bp::arg("p2") ) );
        
        }
        { //::Faunus::box::clash
        
            typedef bool ( ::Faunus::box::*clash_function_type )( ::Faunus::particle const &,::Faunus::particle const & ) ;
            typedef bool ( slit_wrapper::*default_clash_function_type )( ::Faunus::particle const &,::Faunus::particle const & ) ;
            
            slit_exposer.def( 
                "clash"
                , clash_function_type(&::Faunus::box::clash)
                , default_clash_function_type(&slit_wrapper::default_clash)
                , ( bp::arg("a"), bp::arg("b") ) );
        
        }
        { //::Faunus::box::collision
        
            typedef bool ( ::Faunus::box::*collision_function_type )( ::Faunus::particle const & ) ;
            typedef bool ( slit_wrapper::*default_collision_function_type )( ::Faunus::particle const & ) ;
            
            slit_exposer.def( 
                "collision"
                , collision_function_type(&::Faunus::box::collision)
                , default_collision_function_type(&slit_wrapper::default_collision)
                , ( bp::arg("a") ) );
        
        }
        { //::Faunus::box::povray
        
            typedef ::std::string ( ::Faunus::box::*povray_function_type )(  ) ;
            typedef ::std::string ( slit_wrapper::*default_povray_function_type )(  ) ;
            
            slit_exposer.def( 
                "povray"
                , povray_function_type(&::Faunus::box::povray)
                , default_povray_function_type(&slit_wrapper::default_povray) );
        
        }
        { //::Faunus::box::randompos
        
            typedef void ( ::Faunus::box::*randompos_function_type )( ::Faunus::point & ) ;
            typedef void ( slit_wrapper::*default_randompos_function_type )( ::Faunus::point & ) ;
            
            slit_exposer.def( 
                "randompos"
                , randompos_function_type(&::Faunus::box::randompos)
                , default_randompos_function_type(&slit_wrapper::default_randompos)
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::box::randompos
        
            typedef ::Faunus::point ( ::Faunus::box::*randompos_function_type )(  ) ;
            
            slit_exposer.def( 
                "randompos"
                , randompos_function_type( &::Faunus::box::randompos ) );
        
        }
        { //::Faunus::box::scale
        
            typedef void ( ::Faunus::box::*scale_function_type )( ::Faunus::point &,double const & ) const;
            typedef void ( slit_wrapper::*default_scale_function_type )( ::Faunus::point &,double const & ) const;
            
            slit_exposer.def( 
                "scale"
                , scale_function_type(&::Faunus::box::scale)
                , default_scale_function_type(&slit_wrapper::default_scale)
                , ( bp::arg("a"), bp::arg("newlen") ) );
        
        }
        { //::Faunus::box::setvolume
        
            typedef void ( ::Faunus::box::*setvolume_function_type )( double ) ;
            typedef void ( slit_wrapper::*default_setvolume_function_type )( double ) ;
            
            slit_exposer.def( 
                "setvolume"
                , setvolume_function_type(&::Faunus::box::setvolume)
                , default_setvolume_function_type(&slit_wrapper::default_setvolume)
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::box::vdist
        
            typedef ::Faunus::point ( ::Faunus::box::*vdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            typedef ::Faunus::point ( slit_wrapper::*default_vdist_function_type )( ::Faunus::point const &,::Faunus::point const & ) ;
            
            slit_exposer.def( 
                "vdist"
                , vdist_function_type(&::Faunus::box::vdist)
                , default_vdist_function_type(&slit_wrapper::default_vdist)
                , ( bp::arg("a"), bp::arg("b") ) );
        
        }
    }

}
