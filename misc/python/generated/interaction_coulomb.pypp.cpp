// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "interaction_coulomb.pypp.hpp"

namespace bp = boost::python;

struct interaction_less__Faunus_scope_pot_coulomb__greater__wrapper : Faunus::interaction< Faunus::pot_coulomb >, bp::wrapper< Faunus::interaction< Faunus::pot_coulomb > > {

    interaction_less__Faunus_scope_pot_coulomb__greater__wrapper(Faunus::interaction<Faunus::pot_coulomb> const & arg )
    : Faunus::interaction<Faunus::pot_coulomb>( arg )
      , bp::wrapper< Faunus::interaction< Faunus::pot_coulomb > >(){
        // copy constructor
        
    }

    interaction_less__Faunus_scope_pot_coulomb__greater__wrapper(::Faunus::inputfile & in )
    : Faunus::interaction<Faunus::pot_coulomb>( boost::ref(in) )
      , bp::wrapper< Faunus::interaction< Faunus::pot_coulomb > >(){
        // constructor
    
    }

    virtual double dipdip( ::Faunus::point const & a, ::Faunus::point const & b, double r ) {
        if( bp::override func_dipdip = this->get_override( "dipdip" ) )
            return func_dipdip( boost::ref(a), boost::ref(b), r );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::dipdip( boost::ref(a), boost::ref(b), r );
    }
    
    
    double default_dipdip( ::Faunus::point const & a, ::Faunus::point const & b, double r ) {
        return Faunus::interaction< Faunus::pot_coulomb >::dipdip( boost::ref(a), boost::ref(b), r );
    }

    virtual double energy( ::Faunus::particle const & a, ::Faunus::particle const & b ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(a), boost::ref(b) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(a), boost::ref(b) );
    }
    
    
    double default_energy( ::Faunus::particle const & a, ::Faunus::particle const & b ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(a), boost::ref(b) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, int j ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), j );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), j );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, int j ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), j );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), boost::ref(g) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g) );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g, int j ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), boost::ref(g), j );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g), j );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g, int j ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g), j );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g, ::Faunus::particle const & a ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), boost::ref(g), boost::ref(a) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g), boost::ref(a) );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g, ::Faunus::particle const & a ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g), boost::ref(a) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p) );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g1, ::Faunus::group const & g2 ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), boost::ref(g1), boost::ref(g2) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g1), boost::ref(g2) );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g1, ::Faunus::group const & g2 ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(g1), boost::ref(g2) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, ::Faunus::molecules & m, ::std::vector< int > & i ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), boost::ref(m), boost::ref(i) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(m), boost::ref(i) );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, ::Faunus::molecules & m, ::std::vector< int > & i ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(m), boost::ref(i) );
    }

    virtual double energy( ::std::vector< Faunus::particle > const & p, ::Faunus::particle const & a ) {
        if( bp::override func_energy = this->get_override( "energy" ) )
            return func_energy( boost::ref(p), boost::ref(a) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(a) );
    }
    
    
    double default_energy( ::std::vector< Faunus::particle > const & p, ::Faunus::particle const & a ) {
        return Faunus::interaction< Faunus::pot_coulomb >::energy( boost::ref(p), boost::ref(a) );
    }

    virtual double force( ::Faunus::container & c, ::Faunus::particle a, ::Faunus::particle b, ::Faunus::point rij, double r, double dr ) {
        if( bp::override func_force = this->get_override( "force" ) )
            return func_force( boost::ref(c), a, b, rij, r, dr );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::force( boost::ref(c), a, b, rij, r, dr );
    }
    
    
    double default_force( ::Faunus::container & c, ::Faunus::particle a, ::Faunus::particle b, ::Faunus::point rij, double r, double dr ) {
        return Faunus::interaction< Faunus::pot_coulomb >::force( boost::ref(c), a, b, rij, r, dr );
    }

    virtual void forceall( ::Faunus::container & c, ::std::vector< Faunus::point > & f ) {
        if( bp::override func_forceall = this->get_override( "forceall" ) )
            func_forceall( boost::ref(c), boost::ref(f) );
        else
            this->Faunus::interaction< Faunus::pot_coulomb >::forceall( boost::ref(c), boost::ref(f) );
    }
    
    
    void default_forceall( ::Faunus::container & c, ::std::vector< Faunus::point > & f ) {
        Faunus::interaction< Faunus::pot_coulomb >::forceall( boost::ref(c), boost::ref(f) );
    }

    virtual double internal( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g, int step=1 ) {
        if( bp::override func_internal = this->get_override( "internal" ) )
            return func_internal( boost::ref(p), boost::ref(g), step );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::internal( boost::ref(p), boost::ref(g), step );
    }
    
    
    double default_internal( ::std::vector< Faunus::particle > const & p, ::Faunus::group const & g, int step=1 ) {
        return Faunus::interaction< Faunus::pot_coulomb >::internal( boost::ref(p), boost::ref(g), step );
    }

    virtual double iondip( ::Faunus::point const & a, double q, double r ) {
        if( bp::override func_iondip = this->get_override( "iondip" ) )
            return func_iondip( boost::ref(a), q, r );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::iondip( boost::ref(a), q, r );
    }
    
    
    double default_iondip( ::Faunus::point const & a, double q, double r ) {
        return Faunus::interaction< Faunus::pot_coulomb >::iondip( boost::ref(a), q, r );
    }

    virtual double pot( ::std::vector< Faunus::particle > const & p, ::Faunus::point const & a ) {
        if( bp::override func_pot = this->get_override( "pot" ) )
            return func_pot( boost::ref(p), boost::ref(a) );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::pot( boost::ref(p), boost::ref(a) );
    }
    
    
    double default_pot( ::std::vector< Faunus::particle > const & p, ::Faunus::point const & a ) {
        return Faunus::interaction< Faunus::pot_coulomb >::pot( boost::ref(p), boost::ref(a) );
    }

    virtual double potential( ::std::vector< Faunus::particle > const & p, short unsigned int j ) {
        if( bp::override func_potential = this->get_override( "potential" ) )
            return func_potential( boost::ref(p), j );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::potential( boost::ref(p), j );
    }
    
    
    double default_potential( ::std::vector< Faunus::particle > const & p, short unsigned int j ) {
        return Faunus::interaction< Faunus::pot_coulomb >::potential( boost::ref(p), j );
    }

    virtual double potential( ::std::vector< Faunus::particle > const & p, ::Faunus::point a ) {
        if( bp::override func_potential = this->get_override( "potential" ) )
            return func_potential( boost::ref(p), a );
        else
            return this->Faunus::interaction< Faunus::pot_coulomb >::potential( boost::ref(p), a );
    }
    
    
    double default_potential( ::std::vector< Faunus::particle > const & p, ::Faunus::point a ) {
        return Faunus::interaction< Faunus::pot_coulomb >::potential( boost::ref(p), a );
    }

};

void register_interaction_coulomb_class(){

    { //::Faunus::interaction< Faunus::pot_coulomb >
        typedef bp::class_< interaction_less__Faunus_scope_pot_coulomb__greater__wrapper, bp::bases< Faunus::energybase > > interaction_coulomb_exposer_t;
        interaction_coulomb_exposer_t interaction_coulomb_exposer = interaction_coulomb_exposer_t( "interaction_coulomb", bp::init< Faunus::inputfile & >(( bp::arg("in") )) );
        bp::scope interaction_coulomb_scope( interaction_coulomb_exposer );
        bp::implicitly_convertible< Faunus::inputfile &, Faunus::interaction< Faunus::pot_coulomb > >();
        { //::Faunus::interaction< Faunus::pot_coulomb >::dipdip
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*dipdip_function_type )( ::Faunus::point const &,::Faunus::point const &,double ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_dipdip_function_type )( ::Faunus::point const &,::Faunus::point const &,double ) ;
            
            interaction_coulomb_exposer.def( 
                "dipdip"
                , dipdip_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::dipdip)
                , default_dipdip_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_dipdip)
                , ( bp::arg("a"), bp::arg("b"), bp::arg("r") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::Faunus::particle const &,::Faunus::particle const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::Faunus::particle const &,::Faunus::particle const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("a"), bp::arg("b") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,int ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,int ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("j") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("g") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,int ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,int ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("g"), bp::arg("j") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,::Faunus::particle const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,::Faunus::particle const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("g"), bp::arg("a") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::std::vector< Faunus::macromolecule > const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type( &::Faunus::interaction< Faunus::pot_coulomb >::energy )
                , ( bp::arg("p"), bp::arg("g") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,::Faunus::group const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,::Faunus::group const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("g1"), bp::arg("g2") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::molecules &,::std::vector< int > & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::molecules &,::std::vector< int > & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("m"), bp::arg("i") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::energy
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::particle const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_energy_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::particle const & ) ;
            
            interaction_coulomb_exposer.def( 
                "energy"
                , energy_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::energy)
                , default_energy_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_energy)
                , ( bp::arg("p"), bp::arg("a") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::force
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*force_function_type )( ::Faunus::container &,::Faunus::particle,::Faunus::particle,::Faunus::point,double,double ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_force_function_type )( ::Faunus::container &,::Faunus::particle,::Faunus::particle,::Faunus::point,double,double ) ;
            
            interaction_coulomb_exposer.def( 
                "force"
                , force_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::force)
                , default_force_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_force)
                , ( bp::arg("c"), bp::arg("a"), bp::arg("b"), bp::arg("rij"), bp::arg("r"), bp::arg("dr") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::forceall
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef void ( exported_class_t::*forceall_function_type )( ::Faunus::container &,::std::vector< Faunus::point > & ) ;
            typedef void ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_forceall_function_type )( ::Faunus::container &,::std::vector< Faunus::point > & ) ;
            
            interaction_coulomb_exposer.def( 
                "forceall"
                , forceall_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::forceall)
                , default_forceall_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_forceall)
                , ( bp::arg("c"), bp::arg("f") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::info
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef ::std::string ( exported_class_t::*info_function_type )(  ) ;
            
            interaction_coulomb_exposer.def( 
                "info"
                , info_function_type( &::Faunus::interaction< Faunus::pot_coulomb >::info ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::internal
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*internal_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,int ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_internal_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::group const &,int ) ;
            
            interaction_coulomb_exposer.def( 
                "internal"
                , internal_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::internal)
                , default_internal_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_internal)
                , ( bp::arg("p"), bp::arg("g"), bp::arg("step")=(int)(1) ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::iondip
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*iondip_function_type )( ::Faunus::point const &,double,double ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_iondip_function_type )( ::Faunus::point const &,double,double ) ;
            
            interaction_coulomb_exposer.def( 
                "iondip"
                , iondip_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::iondip)
                , default_iondip_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_iondip)
                , ( bp::arg("a"), bp::arg("q"), bp::arg("r") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::pot
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*pot_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::point const & ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_pot_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::point const & ) ;
            
            interaction_coulomb_exposer.def( 
                "pot"
                , pot_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::pot)
                , default_pot_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_pot)
                , ( bp::arg("p"), bp::arg("a") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::potential
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*potential_function_type )( ::std::vector< Faunus::particle > const &,short unsigned int ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_potential_function_type )( ::std::vector< Faunus::particle > const &,short unsigned int ) ;
            
            interaction_coulomb_exposer.def( 
                "potential"
                , potential_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::potential)
                , default_potential_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_potential)
                , ( bp::arg("p"), bp::arg("j") ) );
        
        }
        { //::Faunus::interaction< Faunus::pot_coulomb >::potential
        
            typedef Faunus::interaction< Faunus::pot_coulomb > exported_class_t;
            typedef double ( exported_class_t::*potential_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::point ) ;
            typedef double ( interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::*default_potential_function_type )( ::std::vector< Faunus::particle > const &,::Faunus::point ) ;
            
            interaction_coulomb_exposer.def( 
                "potential"
                , potential_function_type(&::Faunus::interaction< Faunus::pot_coulomb >::potential)
                , default_potential_function_type(&interaction_less__Faunus_scope_pot_coulomb__greater__wrapper::default_potential)
                , ( bp::arg("p"), bp::arg("a") ) );
        
        }
        interaction_coulomb_exposer.def_readwrite( "pair", &Faunus::interaction< Faunus::pot_coulomb >::pair );
    }

}
