// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "virial.pypp.hpp"

namespace bp = boost::python;

struct virial_wrapper : Faunus::virial, bp::wrapper< Faunus::virial > {

    virial_wrapper(Faunus::virial const & arg )
    : Faunus::virial( arg )
      , bp::wrapper< Faunus::virial >(){
        // copy constructor
        
    }

    virial_wrapper(::Faunus::container & arg0 )
    : Faunus::virial( boost::ref(arg0) )
      , bp::wrapper< Faunus::virial >(){
        // constructor
    
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::virial::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::virial::info( );
    }

};

void register_virial_class(){

    { //::Faunus::virial
        typedef bp::class_< virial_wrapper, bp::bases< Faunus::analysis > > virial_exposer_t;
        virial_exposer_t virial_exposer = virial_exposer_t( "virial", bp::init< Faunus::container & >(( bp::arg("arg0") )) );
        bp::scope virial_scope( virial_exposer );
        bp::implicitly_convertible< Faunus::container &, Faunus::virial >();
        { //::Faunus::virial::info
        
            typedef ::std::string ( ::Faunus::virial::*info_function_type )(  ) ;
            typedef ::std::string ( virial_wrapper::*default_info_function_type )(  ) ;
            
            virial_exposer.def( 
                "info"
                , info_function_type(&::Faunus::virial::info)
                , default_info_function_type(&virial_wrapper::default_info) );
        
        }
        { //::Faunus::virial::sample
        
            typedef void ( ::Faunus::virial::*sample_function_type )( ::Faunus::container &,::Faunus::energybase & ) ;
            
            virial_exposer.def( 
                "sample"
                , sample_function_type( &::Faunus::virial::sample )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        virial_exposer.def_readwrite( "dr", &Faunus::virial::dr );
        virial_exposer.def_readwrite( "pex", &Faunus::virial::pex );
    }

}
