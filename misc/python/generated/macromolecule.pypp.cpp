// This file has been generated by Py++.

#include "boost/python.hpp"
#include "generated/generated_header.h"
#include "macromolecule.pypp.hpp"

namespace bp = boost::python;

struct macromolecule_wrapper : Faunus::macromolecule, bp::wrapper< Faunus::macromolecule > {

    macromolecule_wrapper( )
    : Faunus::macromolecule( )
      , bp::wrapper< Faunus::macromolecule >(){
        // null constructor
    
    }

    virtual double charge( ::std::vector< Faunus::particle > const & arg0 ) {
        if( bp::override func_charge = this->get_override( "charge" ) )
            return func_charge( boost::ref(arg0) );
        else
            return this->Faunus::macromolecule::charge( boost::ref(arg0) );
    }
    
    
    double default_charge( ::std::vector< Faunus::particle > const & arg0 ) {
        return Faunus::macromolecule::charge( boost::ref(arg0) );
    }

    virtual ::std::string info(  ) {
        if( bp::override func_info = this->get_override( "info" ) )
            return func_info(  );
        else
            return this->Faunus::macromolecule::info(  );
    }
    
    
    ::std::string default_info(  ) {
        return Faunus::macromolecule::info( );
    }

    virtual void isobaricmove( ::Faunus::container & arg0, double arg1 ) {
        if( bp::override func_isobaricmove = this->get_override( "isobaricmove" ) )
            func_isobaricmove( boost::ref(arg0), arg1 );
        else
            this->Faunus::macromolecule::isobaricmove( boost::ref(arg0), arg1 );
    }
    
    
    void default_isobaricmove( ::Faunus::container & arg0, double arg1 ) {
        Faunus::macromolecule::isobaricmove( boost::ref(arg0), arg1 );
    }

    virtual short unsigned int nummolecules(  ) {
        if( bp::override func_nummolecules = this->get_override( "nummolecules" ) )
            return func_nummolecules(  );
        else
            return this->Faunus::macromolecule::nummolecules(  );
    }
    
    
    short unsigned int default_nummolecules(  ) {
        return Faunus::macromolecule::nummolecules( );
    }

    virtual short unsigned int displace( ::Faunus::container & arg0, double arg1 ) {
        if( bp::override func_displace = this->get_override( "displace" ) )
            return func_displace( boost::ref(arg0), arg1 );
        else
            return this->Faunus::group::displace( boost::ref(arg0), arg1 );
    }
    
    
    short unsigned int default_displace( ::Faunus::container & arg0, double arg1 ) {
        return Faunus::group::displace( boost::ref(arg0), arg1 );
    }

    virtual short int random(  ) {
        if( bp::override func_random = this->get_override( "random" ) )
            return func_random(  );
        else
            return this->Faunus::group::random(  );
    }
    
    
    short int default_random(  ) {
        return Faunus::group::random( );
    }

};

void register_macromolecule_class(){

    { //::Faunus::macromolecule
        typedef bp::class_< macromolecule_wrapper, bp::bases< Faunus::group >, boost::noncopyable > macromolecule_exposer_t;
        macromolecule_exposer_t macromolecule_exposer = macromolecule_exposer_t( "macromolecule", bp::no_init );
        bp::scope macromolecule_scope( macromolecule_exposer );
        macromolecule_exposer.def( bp::init< >() );
        { //::Faunus::macromolecule::add
        
            typedef void ( ::Faunus::macromolecule::*add_function_type )( ::Faunus::container &,::Faunus::inputfile & ) ;
            
            macromolecule_exposer.def( 
                "add"
                , add_function_type( &::Faunus::macromolecule::add )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::macromolecule::center
        
            typedef void ( ::Faunus::macromolecule::*center_function_type )( ::Faunus::container & ) ;
            
            macromolecule_exposer.def( 
                "center"
                , center_function_type( &::Faunus::macromolecule::center )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::macromolecule::charge
        
            typedef double ( ::Faunus::macromolecule::*charge_function_type )( ::std::vector< Faunus::particle > const & ) ;
            typedef double ( macromolecule_wrapper::*default_charge_function_type )( ::std::vector< Faunus::particle > const & ) ;
            
            macromolecule_exposer.def( 
                "charge"
                , charge_function_type(&::Faunus::macromolecule::charge)
                , default_charge_function_type(&macromolecule_wrapper::default_charge)
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::macromolecule::dipole
        
            typedef double ( ::Faunus::macromolecule::*dipole_function_type )( ::std::vector< Faunus::particle > & ) ;
            
            macromolecule_exposer.def( 
                "dipole"
                , dipole_function_type( &::Faunus::macromolecule::dipole )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::macromolecule::info
        
            typedef ::std::string ( ::Faunus::macromolecule::*info_function_type )(  ) ;
            typedef ::std::string ( macromolecule_wrapper::*default_info_function_type )(  ) ;
            
            macromolecule_exposer.def( 
                "info"
                , info_function_type(&::Faunus::macromolecule::info)
                , default_info_function_type(&macromolecule_wrapper::default_info) );
        
        }
        { //::Faunus::macromolecule::info
        
            typedef ::std::string ( ::Faunus::macromolecule::*info_function_type )( ::Faunus::container & ) ;
            
            macromolecule_exposer.def( 
                "info"
                , info_function_type( &::Faunus::macromolecule::info )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::macromolecule::isobaricmove
        
            typedef void ( ::Faunus::macromolecule::*isobaricmove_function_type )( ::Faunus::container &,double ) ;
            typedef void ( macromolecule_wrapper::*default_isobaricmove_function_type )( ::Faunus::container &,double ) ;
            
            macromolecule_exposer.def( 
                "isobaricmove"
                , isobaricmove_function_type(&::Faunus::macromolecule::isobaricmove)
                , default_isobaricmove_function_type(&macromolecule_wrapper::default_isobaricmove)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::macromolecule::nummolecules
        
            typedef short unsigned int ( ::Faunus::macromolecule::*nummolecules_function_type )(  ) ;
            typedef short unsigned int ( macromolecule_wrapper::*default_nummolecules_function_type )(  ) ;
            
            macromolecule_exposer.def( 
                "nummolecules"
                , nummolecules_function_type(&::Faunus::macromolecule::nummolecules)
                , default_nummolecules_function_type(&macromolecule_wrapper::default_nummolecules) );
        
        }
        { //::Faunus::macromolecule::operator=
        
            typedef ::Faunus::macromolecule & ( ::Faunus::macromolecule::*assign_function_type )( ::Faunus::group const & ) ;
            
            macromolecule_exposer.def( 
                "assign"
                , assign_function_type( &::Faunus::macromolecule::operator= )
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
        { //::Faunus::macromolecule::radius
        
            typedef double ( ::Faunus::macromolecule::*radius_function_type )( ::std::vector< Faunus::particle > & ) ;
            
            macromolecule_exposer.def( 
                "radius"
                , radius_function_type( &::Faunus::macromolecule::radius )
                , ( bp::arg("arg0") ) );
        
        }
        { //::Faunus::macromolecule::rotate
        
            typedef void ( ::Faunus::macromolecule::*rotate_function_type )( ::Faunus::container &,double,double ) ;
            
            macromolecule_exposer.def( 
                "rotate"
                , rotate_function_type( &::Faunus::macromolecule::rotate )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2")=0 ) );
        
        }
        { //::Faunus::macromolecule::rotate
        
            typedef void ( ::Faunus::macromolecule::*rotate_function_type )( ::Faunus::container &,::Faunus::point,double,double ) ;
            
            macromolecule_exposer.def( 
                "rotate"
                , rotate_function_type( &::Faunus::macromolecule::rotate )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3") ) );
        
        }
        { //::Faunus::macromolecule::rotate
        
            typedef void ( ::Faunus::macromolecule::*rotate_function_type )( ::Faunus::container &,::Faunus::point,::Faunus::point,double ) ;
            
            macromolecule_exposer.def( 
                "rotate"
                , rotate_function_type( &::Faunus::macromolecule::rotate )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3") ) );
        
        }
        { //::Faunus::macromolecule::transrot
        
            typedef void ( ::Faunus::macromolecule::*transrot_function_type )( ::Faunus::container &,double,double ) ;
            
            macromolecule_exposer.def( 
                "transrot"
                , transrot_function_type( &::Faunus::macromolecule::transrot )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::Faunus::macromolecule::zmove
        
            typedef void ( ::Faunus::macromolecule::*zmove_function_type )( ::Faunus::container &,double ) ;
            
            macromolecule_exposer.def( 
                "zmove"
                , zmove_function_type( &::Faunus::macromolecule::zmove )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        macromolecule_exposer.def_readonly( "Q", &Faunus::macromolecule::Q );
        macromolecule_exposer.def_readonly( "Q2", &Faunus::macromolecule::Q2 );
        macromolecule_exposer.def_readonly( "dip", &Faunus::macromolecule::dip );
        macromolecule_exposer.def_readonly( "dip2", &Faunus::macromolecule::dip2 );
        macromolecule_exposer.def_readonly( "mu", &Faunus::macromolecule::mu );
        { //::Faunus::group::displace
        
            typedef short unsigned int ( ::Faunus::group::*displace_function_type )( ::Faunus::container &,double ) ;
            typedef short unsigned int ( macromolecule_wrapper::*default_displace_function_type )( ::Faunus::container &,double ) ;
            
            macromolecule_exposer.def( 
                "displace"
                , displace_function_type(&::Faunus::group::displace)
                , default_displace_function_type(&macromolecule_wrapper::default_displace)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::Faunus::group::random
        
            typedef short int ( ::Faunus::group::*random_function_type )(  ) ;
            typedef short int ( macromolecule_wrapper::*default_random_function_type )(  ) ;
            
            macromolecule_exposer.def( 
                "random"
                , random_function_type(&::Faunus::group::random)
                , default_random_function_type(&macromolecule_wrapper::default_random) );
        
        }
    }

}
