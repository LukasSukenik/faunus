#!/bin/bash

# THIS RUN SCRIPT IS USED AS A UNIT TEST SO PLEASE
# DO NOT UPLOAD ANY MODIFIED VERSIONS TO SVN UNLESS
# TO UPDATE THE TEST.

source_tests_dir="`dirname $0`"
cp -f $source_tests_dir/manybody.test . 2> /dev/null
cp -f $source_tests_dir/manybody.state state 2> /dev/null

function mkinput() {
echo '
{
  "processes" :
  {
    "H-Asp" : { "bound":"HASP" , "free":"ASP" , "pKd":4.0  , "pX":'$pH' },
    "H-Ctr" : { "bound":"HCTR" , "free":"CTR" , "pKd":2.6  , "pX":'$pH' },
    "H-Glu" : { "bound":"HGLU" , "free":"GLU" , "pKd":4.4  , "pX":'$pH' },
    "H-His" : { "bound":"HHIS" , "free":"HIS" , "pKd":6.3  , "pX":'$pH' },
    "H-Arg" : { "bound":"HARG" , "free":"ARG" , "pKd":12.0 , "pX":'$pH' },
    "K1"    : { "bound":"H3PO4", "free":"H2PO4","pKd":2.12,  "pX":'$pH' },
    "K2"    : { "bound":"H2PO4", "free":"HPO4", "pKd":7.21,  "pX":'$pH' },
    "K3"    : { "bound":"HPO4",  "free":"PO4",  "pKd":12.67, "pX":'$pH' }
  },
 
  "atomlist" :
  {
    "H3PO4":  { "q":0,  "r":2.0 },           // simple ions
    "H2PO4":  { "q":-1, "r":2.0 },
    "HPO4" :  { "q":-2, "r":2.0 },
    "PO4"  :  { "q":-3, "r":2.0 },
    "Na"   :  { "q": 1, "r":1.9, "mw":22.99 },
    "Cl"   :  { "q":-1, "r":1.7, "mw":35.45 },
    "I"    :  { "q":-1, "r":2.0, "mw":1 },
    "SCN"  :  { "q":-1, "r":2.0, "mw":1 },
    "ASP"  :  { "q":-1, "r":3.6, "mw":110 }, // amino acids
    "HASP" :  { "q":0,  "r":3.6, "mw":110 },
    "CTR"  :  { "q":-1, "r":2.0, "mw":16 },
    "HCTR" :  { "q":0,  "r":2.0, "mw":16 },
    "GLU"  :  { "q":-1, "r":3.8, "mw":122 },
    "HGLU" :  { "q":0,  "r":3.8, "mw":122 },
    "HIS"  :  { "q":0,  "r":3.9, "mw":130 },
    "HHIS" :  { "q":1,  "r":3.9, "mw":130 },
    "NTR"  :  { "q":0,  "r":2.0, "mw":14 },
    "HNTR" :  { "q":1,  "r":2.0, "mw":14 },
    "TYR"  :  { "q":-1, "r":4.1, "mw":154 },
    "HTYR" :  { "q":0,  "r":4.1, "mw":154 },
    "LYS"  :  { "q":0,  "r":3.7, "mw":116 },
    "HLYS" :  { "q":1,  "r":3.7, "mw":116 },
    "CYS"  :  { "q":-1, "r":3.6, "mw":103 },
    "HCYS" :  { "q":0,  "r":3.6, "mw":103 },
    "ARG"  :  { "q":0,  "r":4.0, "mw":144 },
    "HARG" :  { "q":1,  "r":4.0, "mw":144 },
    "ALA"  :  { "q":0,  "r":3.1, "mw":66 },
    "ILE"  :  { "q":0,  "r":3.6, "mw":102 },
    "LEU"  :  { "q":0,  "r":3.6, "mw":102 },
    "MET"  :  { "q":0,  "r":3.8, "mw":122 },
    "PHE"  :  { "q":0,  "r":3.9, "mw":138 },
    "PRO"  :  { "q":0,  "r":3.4, "mw":90 },
    "TRP"  :  { "q":0,  "r":4.3, "mw":176 },
    "VAL"  :  { "q":0,  "r":3.4, "mw":90 },
    "SER"  :  { "q":0,  "r":3.3, "mw":82 },
    "THR"  :  { "q":0,  "r":3.5, "mw":94 },
    "ASN"  :  { "q":0,  "r":3.6, "mw":108 },
    "GLN"  :  { "q":0,  "r":3.8, "mw":120 },
    "GLY"  :  { "q":0,  "r":2.9, "mw":54 }
  }
}
' > manybody.json

echo "
atomlist               manybody.json
eq_processfile         manybody.json

loop_macrosteps        10
loop_microsteps        $micro

temperature            298     # Kelvin
epsilon_r              78.7    # Water dielectric const
dh_ionicstrength       0.010   # mol/l
lj_eps                 0.05    # kT
squarewell_depth       0.0     # kT
squarewell_threshold   1.5     # angstrom

cuboid_len             $boxlen # Box side length Angstrom
npt_P                  0       # mM
npt_dV                 0       # log(dV)
transrot_transdp       50      # Molecular translation parameter
transrot_rotdp         2       # Molecular rotation parameter

# Molecular species - currently only two different kinds
molecule1_N            1
molecule1         manybody.aam
molecule2_N            1
molecule2         manybody.aam

# Atomic species - add up to ten.
tion1                  Na
nion1                  100
dpion1                 10

tion2                  Cl
nion2                  100
dpion2                 10

test_stable            yes
test_file              manybody.test
" > manybody.input

echo "2
 HIS  0   0.00   0.00   0.00    -0   1  3.0
 GLY  0   2.00   0.00   1.00     0   1  2.0
" > manybody.aam
}

boxlen=100

for pH in 6.3
do
  rm -fR state
  micro=10000
  mkinput
  ./manybody
  exit

  # production
  micro=10000
  mktit
  mkinput
  mpiexec -np 2 $exe -i $base.input -c $base.state -o $base.state #> out
done

